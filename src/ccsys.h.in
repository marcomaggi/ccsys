/*
  Part of: CCSys
  Contents: public header file
  Date: Sat Dec 17, 2016

  Abstract

	This is the  main header: it must be included  in all the source
	files  using  CCSys.   Notice  that the  code  needs  the  POSIX
	features, so it defines the following symbol:

	   #define _POSIX_C_SOURCE 200809L

  Copyright (C) 2016, 2017, 2018 Marco Maggi <marco.maggi-ipsu@poste.it>

  This program is  free software: you can redistribute  it and/or modify
  it  under the  terms  of  the GNU  Lesser  General  Public License  as
  published by  the Free  Software Foundation, either  version 3  of the
  License, or (at your option) any later version.

  This program  is distributed in the  hope that it will  be useful, but
  WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
  MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
  General Public License for more details.

  You  should have  received a  copy of  the GNU  Lesser General  Public
  License     along    with     this    program.      If    not,     see
  <http://www.gnu.org/licenses/>.
*/

#ifndef CCSYS_H
#define CCSYS_H 1


/** --------------------------------------------------------------------
 ** Preliminary definitions.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* The macro  CCSYS_UNUSED indicates that a  function, function argument
   or variable may potentially be unused. Usage examples:

   static int unused_function (char arg) CCSYS_UNUSED;
   int foo (char unused_argument CCSYS_UNUSED);
   int unused_variable CCSYS_UNUSED;
*/
#ifdef __GNUC__
#  define CCSYS_UNUSED		__attribute__((unused))
#else
#  define CCSYS_UNUSED		/* empty */
#endif

#ifndef __GNUC__
#  define __attribute__(...)	/* empty */
#endif

#ifndef __GNUC__
#  define __builtin_expect(...)	/* empty */
#endif

#if defined _WIN32 || defined __CYGWIN__
#  ifdef BUILDING_DLL
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllexport)) extern
#    else
#      define ccsys_decl		__declspec(dllexport) extern
#    endif
#  else
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllimport)) extern
#    else
#      define ccsys_decl		__declspec(dllimport) extern
#    endif
#  endif
#  define ccsys_private_decl	extern
#else
#  if __GNUC__ >= 4
#    define ccsys_decl		__attribute__((visibility ("default"))) extern
#    define ccsys_private_decl	__attribute__((visibility ("hidden")))  extern
#  else
#    define ccsys_decl		extern
#    define ccsys_private_decl	extern
#  endif
#endif


/** --------------------------------------------------------------------
 ** Helper macros.
 ** ----------------------------------------------------------------- */

/* Pointer cast macro helper. */
#define CCSYS_PC(TYPE,X,Y)		TYPE * X = (TYPE *) (Y)

/* CCSYS_STRUCT_ACCESSOR
 *
 * Define  an inline  function as  accessor for  a struct's  field.  For
 * example, to  define the  accessor for the  field "d_name"  of "struct
 * dirent" we do:
 *
 *   CCSYS_STRUCT_ACCESSOR(ccsys_dirent_d_name, ccsys_dirent_t,
 *      char const *, @OFFSETOF_STRUCT_DIRENT_D_NAME@)
 *
 */
#define CCSYS_STRUCT_ACCESSOR(FUNCNAME,STRUCT_TYPE,FIELD_TYPE,FIELD_OFFSET) \
  __attribute__((__always_inline__,__nonnull__(1),__pure__))	\
  static inline FIELD_TYPE FUNCNAME (STRUCT_TYPE const * S) { return (FIELD_TYPE) &(S->data[FIELD_OFFSET]); }


/** --------------------------------------------------------------------
 ** Headers.
 ** ----------------------------------------------------------------- */

#include <ccexceptions.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>


/** --------------------------------------------------------------------
 ** Semantic type definitions.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_blkcnt_t		ccsys_blkcnt_t;
typedef struct ccsys_blkcnt_t		ccsys_blkcnt_t;
typedef struct ccsys_blksize_t		ccsys_blksize_t;
typedef struct ccsys_dev_t		ccsys_dev_t;
typedef struct ccsys_dir_t		ccsys_dir_t;
typedef struct ccsys_dirfd_t		ccsys_dirfd_t;
typedef struct ccsys_exit_status_t	ccsys_exit_status_t;
typedef struct ccsys_fd_set_t		ccsys_fd_set_t;
typedef struct ccsys_fd_t		ccsys_fd_t;
typedef struct ccsys_gid_t		ccsys_gid_t;
typedef struct ccsys_ino_t		ccsys_ino_t;
typedef struct ccsys_iovec_t		ccsys_iovec_t;
typedef struct ccsys_madvise_advice_t	ccsys_madvise_advice_t;
typedef struct ccsys_mlockall_flags_t	ccsys_mlockall_flags_t;
typedef struct ccsys_mmap_flags_t	ccsys_mmap_flags_t;
typedef struct ccsys_mmap_prot_t	ccsys_mmap_prot_t;
typedef struct ccsys_mremap_flags_t	ccsys_mremap_flags_t;
typedef struct ccsys_msync_flags_t	ccsys_msync_flags_t;
typedef struct ccsys_nlink_t		ccsys_nlink_t;
typedef struct ccsys_off_t		ccsys_off_t;
typedef struct ccsys_open_flags_t	ccsys_open_flags_t;
typedef struct ccsys_open_mode_t	ccsys_open_mode_t;
typedef struct ccsys_pid_t		ccsys_pid_t;
typedef struct ccsys_socket_namespace_t	ccsys_socket_namespace_t;
typedef struct ccsys_socket_protocol_t	ccsys_socket_protocol_t;
typedef struct ccsys_socket_style_t	ccsys_socket_style_t;
typedef struct ccsys_socklen_t		ccsys_socklen_t;
typedef struct ccsys_timeval_t		ccsys_timeval_t;
typedef struct ccsys_uid_t		ccsys_uid_t;
typedef struct ccsys_unlinkat_flags_t	ccsys_unlinkat_flags_t;

struct ccsys_blkcnt_t		{ @CCSYS_TYPE_BLKCNT_T@		data; };
struct ccsys_blksize_t		{ @CCSYS_TYPE_BLKSIZE_T@	data; };
struct ccsys_dev_t		{ @CCSYS_TYPE_DEV_T@		data; };
struct ccsys_dir_t		{ uint8_t data[1]; };
struct ccsys_dirfd_t		{ int				data; };
struct ccsys_exit_status_t	{ int				data; };
struct ccsys_fd_set_t		{ uint8_t data[@SIZEOF_STRUCT_FD_SET@]; };
struct ccsys_fd_t		{ int				data; };
struct ccsys_gid_t		{ @CCSYS_TYPE_GID_T@		data; };
struct ccsys_ino_t		{ @CCSYS_TYPE_INO_T@		data; };
struct ccsys_iovec_t		{ uint8_t data[@SIZEOF_STRUCT_IOVEC@]; };
struct ccsys_madvise_advice_t	{ int				data; };
struct ccsys_mlockall_flags_t	{ int				data; };
struct ccsys_mmap_flags_t	{ int				data; };
struct ccsys_mmap_prot_t	{ int				data; };
struct ccsys_mremap_flags_t	{ int				data; };
struct ccsys_msync_flags_t	{ int				data; };
struct ccsys_nlink_t		{ @CCSYS_TYPE_NLINK_T@		data; };
struct ccsys_off_t		{ @CCSYS_TYPE_OFF_T@		data; };
struct ccsys_open_flags_t	{ int				data; };
struct ccsys_open_mode_t	{ @CCSYS_TYPE_MODE_T@		data; };
struct ccsys_pid_t		{ @CCSYS_TYPE_PID_T@		data; };
struct ccsys_socket_namespace_t	{ int				data; };
struct ccsys_socket_protocol_t	{ int				data; };
struct ccsys_socket_style_t	{ int				data; };
struct ccsys_socklen_t		{ @CCSYS_TYPE_SOCKLEN_T@	data; };
struct ccsys_timespec_t		{ uint8_t data[@SIZEOF_STRUCT_TIMESPEC@]; };
struct ccsys_timeval_t		{ uint8_t data[@SIZEOF_STRUCT_TIMEVAL@]; };
struct ccsys_uid_t		{ @CCSYS_TYPE_UID_T@		data; };
struct ccsys_unlinkat_flags_t	{ int				data; };


/** --------------------------------------------------------------------
 ** System struct wrappers.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_dirent_t		ccsys_dirent_t;
typedef struct ccsys_hostent_t		ccsys_hostent_t;
typedef struct ccsys_in_addr_t		ccsys_in_addr_t;
typedef struct ccsys_sockaddr_in6_t	ccsys_sockaddr_in6_t;
typedef struct ccsys_sockaddr_in_t	ccsys_sockaddr_in_t;
typedef struct ccsys_sockaddr_t		ccsys_sockaddr_t;
typedef struct ccsys_sockaddr_un_t	ccsys_sockaddr_un_t;
typedef struct ccsys_stat_t		ccsys_stat_t;
typedef struct ccsys_utimbuf_t		ccsys_utimbuf_t;

struct ccsys_dirent_t		{ uint8_t data[@SIZEOF_STRUCT_DIRENT@]; };
struct ccsys_hostent_t		{ uint8_t data[@SIZEOF_STRUCT_HOSTENT@]; };
struct ccsys_in_addr_t		{ uint8_t data[@SIZEOF_STRUCT_IN_ADDR@]; };
struct ccsys_sockaddr_in6_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_IN6@]; };
struct ccsys_sockaddr_in_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_IN@]; };
struct ccsys_sockaddr_t		{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR@]; };
struct ccsys_sockaddr_un_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_UN@]; };
struct ccsys_stat_t		{ uint8_t data[@SIZEOF_STRUCT_STAT@]; };
struct ccsys_utimbuf_t		{ uint8_t data[@SIZEOF_STRUCT_UTIMBUF@]; };


/** --------------------------------------------------------------------
 ** System constants.
 ** ----------------------------------------------------------------- */

enum ccsys_exit_status_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_EXIT_SUCCESS@
  @CCSYS_ENUM_DEF_CCSYS_EXIT_FAILURE@
};

enum ccsys_open_flags_enum_t {
  /* Access modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_RDONLY@
  @CCSYS_ENUM_DEF_CCSYS_O_WRONLY@
  @CCSYS_ENUM_DEF_CCSYS_O_RDWR@

  /* Open modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_CREAT@
  @CCSYS_ENUM_DEF_CCSYS_O_DIRECT@
  @CCSYS_ENUM_DEF_CCSYS_O_DIRECTORY@
  @CCSYS_ENUM_DEF_CCSYS_O_DSYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_EXCL@
  @CCSYS_ENUM_DEF_CCSYS_O_LARGEFILE@
  @CCSYS_ENUM_DEF_CCSYS_O_NDELAY@
  @CCSYS_ENUM_DEF_CCSYS_O_NOCTTY@
  @CCSYS_ENUM_DEF_CCSYS_O_NOFOLLOW@
  @CCSYS_ENUM_DEF_CCSYS_O_NONBLOCK@
  @CCSYS_ENUM_DEF_CCSYS_O_PATH@
  @CCSYS_ENUM_DEF_CCSYS_O_SYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_TMPFILE@
  @CCSYS_ENUM_DEF_CCSYS_O_TRUNC@

  /* Operating modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_APPEND@
  @CCSYS_ENUM_DEF_CCSYS_O_ASYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_CLOEXEC@
  @CCSYS_ENUM_DEF_CCSYS_O_NOATIME@
};

enum ccsys_open_mode_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_S_IRUSR@
  @CCSYS_ENUM_DEF_CCSYS_S_IWUSR@
  @CCSYS_ENUM_DEF_CCSYS_S_IXUSR@

  @CCSYS_ENUM_DEF_CCSYS_S_IRGRP@
  @CCSYS_ENUM_DEF_CCSYS_S_IWGRP@
  @CCSYS_ENUM_DEF_CCSYS_S_IXGRP@

  @CCSYS_ENUM_DEF_CCSYS_S_IROTH@
  @CCSYS_ENUM_DEF_CCSYS_S_IWOTH@
  @CCSYS_ENUM_DEF_CCSYS_S_IXOTH@

  @CCSYS_ENUM_DEF_CCSYS_S_IRWXU@
  @CCSYS_ENUM_DEF_CCSYS_S_IRWXG@
  @CCSYS_ENUM_DEF_CCSYS_S_IRWXO@

  @CCSYS_ENUM_DEF_CCSYS_S_ISUID@
  @CCSYS_ENUM_DEF_CCSYS_S_ISGID@
  @CCSYS_ENUM_DEF_CCSYS_S_ISVTX@
};

enum ccsys_unlinkat_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_AT_REMOVEDIR@
};

enum ccsys_socket_namespace_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SOCK_DGRAM@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_PACKET@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_RAW@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_RDM@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_SEQPACKET@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_STREAM@
};

enum ccsys_socket_style_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_AF_UNIX@
  @CCSYS_ENUM_DEF_CCSYS_AF_LOCAL@
  @CCSYS_ENUM_DEF_CCSYS_AF_INET@
  @CCSYS_ENUM_DEF_CCSYS_AF_INET6@
  @CCSYS_ENUM_DEF_CCSYS_AF_IPX@
  @CCSYS_ENUM_DEF_CCSYS_AF_NETLINK@
  @CCSYS_ENUM_DEF_CCSYS_AF_X25@
  @CCSYS_ENUM_DEF_CCSYS_AF_AX25@
  @CCSYS_ENUM_DEF_CCSYS_AF_ATMPVC@
  @CCSYS_ENUM_DEF_CCSYS_AF_APPLETALK@
  @CCSYS_ENUM_DEF_CCSYS_AF_PACKET@
  @CCSYS_ENUM_DEF_CCSYS_AF_ALG@
};

enum ccsys_socket_protocol_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SOCK_PROTOCOL_IP@
};

enum ccsys_memory_protection_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_PROT_EXEC@
  @CCSYS_ENUM_DEF_CCSYS_PROT_READ@
  @CCSYS_ENUM_DEF_CCSYS_PROT_WRITE@
  @CCSYS_ENUM_DEF_CCSYS_PROT_NONE@
};

enum ccsys_memory_mapping_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MAP_SHARED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_PRIVATE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_32BIT@
  @CCSYS_ENUM_DEF_CCSYS_MAP_ANON@
  @CCSYS_ENUM_DEF_CCSYS_MAP_ANONYMOUS@
  @CCSYS_ENUM_DEF_CCSYS_MAP_DENYWRITE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_EXECUTABLE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_FILE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_FIXED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_GROWSDOWN@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGETLB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGE_2MB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGE_1GB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_LOCKED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_NONBLOCK@
  @CCSYS_ENUM_DEF_CCSYS_MAP_NORESERVE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_POPULATE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_STACK@
  @CCSYS_ENUM_DEF_CCSYS_MAP_UNINITIALIZED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_AUTOGROW@
  @CCSYS_ENUM_DEF_CCSYS_MAP_AUTORESRV@
  @CCSYS_ENUM_DEF_CCSYS_MAP_COPY@
  @CCSYS_ENUM_DEF_CCSYS_MAP_LOCAL@
};

enum ccsys_memory_locking_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MCL_CURRENT@
  @CCSYS_ENUM_DEF_CCSYS_MCL_FUTURE@
  @CCSYS_ENUM_DEF_CCSYS_MCL_ONFAULT@
};

enum ccsys_memory_sync_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MS_ASYNC@
  @CCSYS_ENUM_DEF_CCSYS_MS_SYNC@
  @CCSYS_ENUM_DEF_CCSYS_MS_INVALIDATE@
};

enum ccsys_memory_remap_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MREMAP_MAYMOVE@
  @CCSYS_ENUM_DEF_CCSYS_MREMAP_FIXED@
};

enum ccsys_memory_advice_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MADV_NORMAL@
  @CCSYS_ENUM_DEF_CCSYS_MADV_RANDOM@
  @CCSYS_ENUM_DEF_CCSYS_MADV_SEQUENTIAL@
  @CCSYS_ENUM_DEF_CCSYS_MADV_WILLNEED@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTNEED@
  @CCSYS_ENUM_DEF_CCSYS_MADV_REMOVE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTFORK@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DOFORK@
  @CCSYS_ENUM_DEF_CCSYS_MADV_HWPOISON@
  @CCSYS_ENUM_DEF_CCSYS_MADV_MERGEABLE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_UNMERGEABLE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_SOFT_OFFLINE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_HUGEPAGE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_NOHUGEPAGE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTDUMP@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DODUMP@
  @CCSYS_ENUM_DEF_CCSYS_MADV_FREE@
};

/* ------------------------------------------------------------------ */

typedef enum ccsys_exit_status_enum_t		ccsys_exit_status_enum_t;
typedef enum ccsys_memory_advice_enum_t		ccsys_memory_advice_enum_t;
typedef enum ccsys_memory_locking_enum_t	ccsys_memory_locking_enum_t;
typedef enum ccsys_memory_mapping_enum_t	ccsys_memory_mapping_enum_t;
typedef enum ccsys_memory_protection_enum_t	ccsys_memory_protection_enum_t;
typedef enum ccsys_memory_remap_enum_t		ccsys_memory_remap_enum_t;
typedef enum ccsys_memory_sync_enum_t		ccsys_memory_sync_enum_t;
typedef enum ccsys_open_flags_enum_t		ccsys_open_flags_enum_t;
typedef enum ccsys_open_mode_enum_t		ccsys_open_mode_enum_t;
typedef enum ccsys_socket_namespace_enum_t	ccsys_socket_namespace_enum_t;
typedef enum ccsys_socket_protocol_enum_t	ccsys_socket_protocol_enum_t;
typedef enum ccsys_socket_style_enum_t		ccsys_socket_style_enum_t;
typedef enum ccsys_unlinkat_flags_enum_t	ccsys_unlinkat_flags_enum_t;


/** --------------------------------------------------------------------
 ** Global constants.
 ** ----------------------------------------------------------------- */

static ccsys_fd_t const CCSYS_FD_STDIN  = { .data = 0 };
static ccsys_fd_t const CCSYS_FD_STDOUT = { .data = 1 };
static ccsys_fd_t const CCSYS_FD_STDERR = { .data = 2 };


/** --------------------------------------------------------------------
 ** Version functions.
 ** ----------------------------------------------------------------- */

ccsys_decl char const *	ccsys_version_string		(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_current	(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_revision(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_age	(void)
  __attribute__((__leaf__,__pure__));


/** --------------------------------------------------------------------
 ** Memory allocation.
 ** ----------------------------------------------------------------- */

ccsys_decl void * ccsys_malloc (cce_location_t * L, size_t size)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void * ccsys_realloc (cce_location_t * L, void * ptr, size_t newsize)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void * ccsys_calloc (cce_location_t * L, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void ccsys_free (cce_location_t * L CCSYS_UNUSED, void * ptr)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_malloc_init (cce_location_t * L, cce_handler_t * H, void * pointer)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_malloc_init (cce_location_t * L, cce_handler_t * H, void * pointer)
  __attribute__((__nonnull__(1,2,3)));

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_malloc_guarded_cleanup (cce_location_t * L, cce_cleanup_handler_t * P_H, size_t size)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_malloc_guarded_error   (cce_location_t * L, cce_error_handler_t *   P_H, size_t size)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_malloc_guarded(L,P_H,size) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_malloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_malloc_guarded_error)(L,P_H,size)

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_realloc_guarded_cleanup (cce_location_t * L, cce_cleanup_handler_t * P_H, void * P, size_t newsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_realloc_guarded_error   (cce_location_t * L, cce_error_handler_t *   P_H, void * P, size_t newsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_realloc_guarded(L,P_H,old_P,newsize) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_realloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_realloc_guarded_error)(L,P_H,old_P,newsize)

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_calloc_guarded_cleanup (cce_location_t * L, cce_cleanup_handler_t * P_H, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_calloc_guarded_error   (cce_location_t * L, cce_error_handler_t *   P_H, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_calloc_guarded(L,P_H,count,eltsize) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_calloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_calloc_guarded_error)(L,P_H,count,eltsize)


/** --------------------------------------------------------------------
 ** Locking memory pages.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mlock (cce_location_t * L, void const * addr, size_t len)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_munlock (cce_location_t * L, void const * addr, size_t len)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_mlockall (cce_location_t * L, ccsys_mlockall_flags_t flags)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_munlockall (cce_location_t * L)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Memory mapping.
 ** ----------------------------------------------------------------- */

ccsys_decl void * ccsys_mmap (cce_location_t * L, void * address, size_t length,
			      ccsys_mmap_prot_t prot, ccsys_mmap_flags_t flags,
			      ccsys_fd_t filedes, ccsys_off_t offset)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_munmap (cce_location_t * L, void * address, size_t length)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_msync (cce_location_t * L, void * address, size_t length, ccsys_msync_flags_t flags)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_mprotect (cce_location_t * L, void * address, size_t length, ccsys_mmap_prot_t prot)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_mremap (cce_location_t * L, void * old_address, size_t length, size_t new_length,
				ccsys_mremap_flags_t flags, void * new_address)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void ccsys_madvise (cce_location_t * L, void * address, size_t length, ccsys_madvise_advice_t advice)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** Input/output: opening files.
 ** ----------------------------------------------------------------- */

ccsys_decl ccsys_fd_t ccsys_open (cce_location_t * L, char const * filename,
				  ccsys_open_flags_t flags, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_fd_t ccsys_openat (cce_location_t * L, ccsys_dirfd_t dirfd, char const *filename,
				    ccsys_open_flags_t flags, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1, 3)));


/** --------------------------------------------------------------------
 ** Input/output: creating pipes.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_pipe (cce_location_t * L, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_pipedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_pipedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_pipedes_init(L,H,pipefd)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_pipedes_init, \
	   cce_error_handler_t		*: ccsys_error_handler_pipedes_init)(L,&(H->handler),pipefd)


/** --------------------------------------------------------------------
 ** Input/output: creating FIFOs.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mkfifo (cce_location_t * L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_mkfifoat (cce_location_t * L, ccsys_dirfd_t dirfd, const char * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** Input/output: closing file descriptors.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_close (cce_location_t * L, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_filedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_error_handler_filedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1,2)));

#define ccsys_handler_filedes_init(L,H,filedes)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_filedes_init, \
	   cce_error_handler_t		*: ccsys_error_handler_filedes_init)(L,&(H->handler),filedes)

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_dirfd_init (cce_location_t * L, cce_handler_t * H, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_error_handler_dirfd_init (cce_location_t * L, cce_handler_t * H, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1,2)));

#define ccsys_handler_dirfd_init(L,H,dirfd)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_dirfd_init, \
	   cce_error_handler_t		*: ccsys_error_handler_dirfd_init)(L,&(H->handler),dirfd)


/** --------------------------------------------------------------------
 ** Input/output system: reading and writing files.
 ** ----------------------------------------------------------------- */

ccsys_decl size_t ccsys_read (cce_location_t * L, ccsys_fd_t filedes, void * buffer, size_t size)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pread (cce_location_t * L, ccsys_fd_t filedes, void * buffer, size_t size, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_write (cce_location_t * L, ccsys_fd_t filedes, void const *buffer, size_t size)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pwrite (cce_location_t * L, ccsys_fd_t filedes, void const *buffer, size_t size, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

ccsys_decl ccsys_off_t ccsys_lseek (cce_location_t * L, ccsys_fd_t filedes, ccsys_off_t offset, int whence)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Input/output: scatter-gather input/output.
 ** ----------------------------------------------------------------- */

ccsys_decl size_t ccsys_readv (cce_location_t * L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_writev (cce_location_t * L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count)
  __attribute__((__nonnull__(1,3)));

/* Struct accessors. */
__attribute__((__returns_nonnull__))
CCSYS_STRUCT_ACCESSOR(ccsys_iovec_iov_base, ccsys_iovec_t, void *, @OFFSETOF_STRUCT_IOVEC_IOV_BASE@)

CCSYS_STRUCT_ACCESSOR(ccsys_iovec_iov_len,  ccsys_iovec_t, size_t, @OFFSETOF_STRUCT_IOVEC_IOV_LEN@)


/** --------------------------------------------------------------------
 ** Input/output: duplicating file descriptors.
 ** ----------------------------------------------------------------- */

ccsys_decl ccsys_fd_t ccsys_dup (cce_location_t * L, ccsys_fd_t old)
  __attribute__((__nonnull__(1)));

ccsys_decl ccsys_fd_t ccsys_dup2 (cce_location_t * L, ccsys_fd_t old, ccsys_fd_t new)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Input/output: waiting for input/output.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_select (cce_location_t * L, int nfds,
			     ccsys_fd_set_t * read_fds, ccsys_fd_set_t * write_fds, ccsys_fd_set_t * except_fds,
			     ccsys_timeval_t * timeout)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: reading directory entries.
 ** ----------------------------------------------------------------- */

/* Struct accessors. */
__attribute__((__returns_nonnull__))
CCSYS_STRUCT_ACCESSOR(ccsys_dirent_d_name, ccsys_dirent_t, char const *, @OFFSETOF_STRUCT_DIRENT_D_NAME@)

ccsys_decl ccsys_dir_t * ccsys_opendir (cce_location_t * L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_dir_t * ccsys_fdopendir (cce_location_t * L, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1)));

ccsys_decl ccsys_dirent_t * ccsys_readdir (cce_location_t * L, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_closedir (cce_location_t * L, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_dirfd_t ccsys_dirfd (cce_location_t * L, ccsys_dir_t * _dirstream)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_dirstream_init (cce_location_t * L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_dirstream_init (cce_location_t * L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_dirstream_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_dirstream_init, \
	   cce_error_handler_t		*: ccsys_error_handler_dirstream_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: reading attributes.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_stat (cce_location_t * L, char const * pathname, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_fstat (cce_location_t * L, ccsys_fd_t fd, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,3)));

ccsys_decl void ccsys_lstat (cce_location_t * L, char const * pathname, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,2,3)));

/* ------------------------------------------------------------------ */

/* Struct accessors. */
#if (1 == CCSYS_STRUCT_STAT_HAS_ST_DEV)
__attribute__((__always_inline__,__nonnull__(1),__pure__))
static inline int64_t
ccsys_stat_st_dev (const ccsys_stat_t * S)
{
  return (int64_t) &(S->data[@OFFSETOF_STRUCT_STAT_ST_RDEV@]);
}
#endif

/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_ino,     ccsys_stat_t, ccsys_ino_t,     @OFFSETOF_STRUCT_STAT_ST_INO@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_mode,    ccsys_stat_t, ccsys_open_mode_t,    @OFFSETOF_STRUCT_STAT_ST_MODE@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_nlink,   ccsys_stat_t, ccsys_nlink_t,   @OFFSETOF_STRUCT_STAT_ST_NLINK@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_uid,     ccsys_stat_t, ccsys_uid_t,     @OFFSETOF_STRUCT_STAT_ST_UID@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_gid,     ccsys_stat_t, ccsys_gid_t,     @OFFSETOF_STRUCT_STAT_ST_GID@) */

/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_rdev,    ccsys_stat_t, ccsys_dev_t,     @OFFSETOF_STRUCT_STAT_ST_RDEV@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_size,    ccsys_stat_t, ccsys_off_t,     @OFFSETOF_STRUCT_STAT_ST_SIZE@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_blksize, ccsys_stat_t, ccsys_blksize_t, @OFFSETOF_STRUCT_STAT_ST_BLKSIZE@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_blocks,  ccsys_stat_t, ccsys_blkcnt_t,  @OFFSETOF_STRUCT_STAT_ST_BLOCKS@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_atime,   ccsys_stat_t, ccsys_timespec_t,@OFFSETOF_STRUCT_STAT_ST_ATIME@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_mtime,   ccsys_stat_t, ccsys_timespec_t,@OFFSETOF_STRUCT_STAT_ST_MTIME@) */
/* CCSYS_STRUCT_ACCESSOR(ccsys_stat_st_ctime,   ccsys_stat_t, ccsys_timespec_t,@OFFSETOF_STRUCT_STAT_ST_CTIME@) */


/** --------------------------------------------------------------------
 ** File system: working directory.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_getcwd (cce_location_t * L, char * buffer, size_t size)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_chdir (cce_location_t * L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchdir (cce_location_t * L, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: creating and deleting directories.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mkdir (cce_location_t * L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_rmdir (cce_location_t * L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_rmdir_init (cce_location_t * L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_rmdir_init (cce_location_t * L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_rmdir_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_rmdir_init, \
	   cce_error_handler_t		*: ccsys_error_handler_rmdir_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: temporary files and directories.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_mkstemp (cce_location_t * L, char * template)
  __attribute__((__nonnull__(1,2)));

ccsys_decl char * ccsys_mkdtemp (cce_location_t * L, char * template)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** File system: links.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_link (cce_location_t * L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_linkat (cce_location_t * L,
			      int oldfd, char const * oldname,
			      int newfd, char const * newname,
			      int flags)
  __attribute__((__nonnull__(1,3,5)));

ccsys_decl void ccsys_symlink (cce_location_t * L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_symlinkat (cce_location_t * L, char const * oldname, ccsys_dirfd_t newdirfd, char const * newname)
  __attribute__((__nonnull__(1,2,4)));

ccsys_decl size_t ccsys_readlink (cce_location_t * L, char const * filename, char * buffer, size_t size)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl size_t ccsys_readlinkat (cce_location_t * L, ccsys_dirfd_t dirfd, char const * filename, char * buffer, size_t size)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl char * ccsys_realpath (cce_location_t * L, char const * pathname, char * resolved_path)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_unlink (cce_location_t * L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_unlinkat (cce_location_t * L, ccsys_dirfd_t dirfd, char const * pathname, ccsys_unlinkat_flags_t flags)
  __attribute__((__nonnull__(1,3)));

/* ------------------------------------------------------------------ */

typedef struct ccsys_at_link_t		ccsys_at_link_t;

struct ccsys_at_link_t {
  ccsys_dirfd_t	dirfd;
  char const *	pathname;
};

ccsys_decl void ccsys_cleanup_handler_unlinkat_init (cce_location_t * L, cce_handler_t * H, ccsys_at_link_t * lnk)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_unlinkat_init (cce_location_t * L, cce_handler_t * H, ccsys_at_link_t * lnk)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_unlinkat_init(L,H,LNK)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_unlinkat_init, \
	   cce_error_handler_t		*: ccsys_error_handler_unlinkat_init)(L,&(H->handler),LNK)


/** --------------------------------------------------------------------
 ** File system: removing files.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_remove (cce_location_t * L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_remove_init (cce_location_t * L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_remove_init (cce_location_t * L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_remove_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_remove_init, \
	   cce_error_handler_t		*: ccsys_error_handler_remove_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: renaming directory entries.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_rename (cce_location_t * L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));


/** --------------------------------------------------------------------
 ** File system: changing owner.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_chown (cce_location_t * L, char const * pathname, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchown (cce_location_t * L, ccsys_fd_t filedes, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_lchown (cce_location_t * L, char const * pathname, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchownat (cce_location_t * L, ccsys_dirfd_t dirfd, char const * pathname,
				ccsys_uid_t owner, ccsys_gid_t group, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: changing access permissions.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_chmod (cce_location_t * L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchmod (cce_location_t * L, ccsys_fd_t filedes, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_fchmodat (cce_location_t * L, ccsys_dirfd_t dirfd, char const * pathname, ccsys_open_mode_t mode, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: testing access permissions.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_access (cce_location_t * L, char const * pathname, int how)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_faccessat (cce_location_t * L, ccsys_dirfd_t dirfd, char const * pathname, int how, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: truncating files.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_truncate (cce_location_t * L, char const * pathname, ccsys_off_t length)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_ftruncate (cce_location_t * L, ccsys_fd_t filedes, ccsys_off_t length)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: file times.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_utime (cce_location_t * L, char const * pathname, ccsys_utimbuf_t const * times)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_utimes (cce_location_t * L, char const * pathname, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_lutimes (cce_location_t * L, char const * pathname, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_futimes (cce_location_t * L, ccsys_fd_t filedes, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** Process handling.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_system (cce_location_t * L, char const * command)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_pid_t ccsys_fork (cce_location_t * L)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_exit (ccsys_exit_status_t status)
  __attribute__((__noreturn__));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_execv (cce_location_t * L, char const * filename, char * const argv [])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_execve (cce_location_t * L, char const * filename, char * const argv [], char * const env [])
  __attribute__((__nonnull__(1,2,3,4)));

ccsys_decl void ccsys_execvp (cce_location_t * L, char const * filename, char * const argv [])
  __attribute__((__nonnull__(1,2,3)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_waitpid (cce_location_t * L, ccsys_pid_t pid, int * wstatus, int options)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** Networking.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_bind (cce_location_t * L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1,3)));

ccsys_decl void ccsys_getsockname (cce_location_t * L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl void ccsys_inet_aton (cce_location_t * L, char const * name, ccsys_in_addr_t * addr)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl ccsys_in_addr_t ccsys_inet_network (cce_location_t * L, char const * name)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyname (cce_location_t * L, char const * name)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyname2 (cce_location_t * L, char const * name, int af)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyaddr (cce_location_t * L, void const * addr, ccsys_socklen_t length, int format)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl int ccsys_socket (cce_location_t * L, ccsys_socket_namespace_t namespace,
			     ccsys_socket_style_t style, ccsys_socket_protocol_t protocol)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_shutdown (cce_location_t * L, ccsys_fd_t socket, int how)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_socketpair (cce_location_t * L, ccsys_socket_namespace_t namespace,
				  ccsys_socket_style_t style, ccsys_socket_protocol_t protocol,
				  ccsys_fd_t filedes[2])
  __attribute__((__nonnull__(1,5)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_connect (cce_location_t * L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_listen (cce_location_t * L, ccsys_fd_t socket, int N)
  __attribute__((__nonnull__(1)));

ccsys_decl int ccsys_accept (cce_location_t * L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl void ccsys_getpeername (cce_location_t * L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl size_t ccsys_send (cce_location_t * L, ccsys_fd_t socket, void const * buffer, size_t size, int flags)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_recv (cce_location_t * L, ccsys_fd_t socket, void * buffer, size_t size, int flags)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_sendto (cce_location_t * L, ccsys_fd_t socket, void const * buffer, size_t size, int flags,
				ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1,3,6)));

ccsys_decl size_t ccsys_recvfrom (cce_location_t * L, ccsys_fd_t socket, void * buffer, size_t size, int flags,
				  ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,6,7)));

ccsys_decl void ccsys_getsockopt (cce_location_t * L, ccsys_fd_t socket, int level, int optname, void * optval, ccsys_socklen_t * optlen_ptr)
  __attribute__((__nonnull__(1,5,6)));

ccsys_decl void ccsys_setsockopt (cce_location_t * L, ccsys_fd_t socket, int level, int optname, void const * optval, ccsys_socklen_t optlen)
  __attribute__((__nonnull__(1,5)));


/** --------------------------------------------------------------------
 ** Done.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* CCSYS_H */

/* end of file */
