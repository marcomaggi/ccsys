dnl @configure_input@
dnl

AC_PREREQ([2.69])
AC_INIT([CCSys],[0.1.0-devel.0],
  [marco.maggi-ipsu@poste.it],
  [ccsys],[http://github.com/marcomaggi/ccsys/])
dnl This is the revision number of this configure.ac
AC_REVISION([0.1])
AC_COPYRIGHT([Copyright (c) 2017, 2018 Marco Maggi <marco.maggi-ipsu@poste.it>

This program is free software: you  can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free  Software Foundation, either version  3 of the License,  or (at
your option) any later version.

This program  is distributed  in the  hope that it  will be  useful, but
WITHOUT   ANY   WARRANTY;  without   even   the   implied  warranty   of
MERCHANTABILITY  or  FITNESS FOR  A  PARTICULAR  PURPOSE.  See  the  GNU
General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
])
AC_CONFIG_SRCDIR([src/])
AC_CONFIG_MACRO_DIR([meta/autotools])
AC_CONFIG_AUX_DIR([meta/autotools])
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([foreign dist-xz no-dist-gzip subdir-objects])
AM_MAINTAINER_MODE

AM_PROG_AR
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P

LT_PREREQ([2.4])
LT_INIT

dnl page
#### configuration

case "$target_os" in
  *linux*)
    ccsys_OS_LINUX=yes
    AC_MSG_NOTICE([detected OS: linux])
    ;;
  *bsd*)
    ccsys_OS_BSD=yes
    AC_MSG_NOTICE([detected OS: BSD])
    ;;
  *cygwin*)
    ccsys_OS_CYGWIN=yes
    AC_MSG_NOTICE([detected OS: CYGWIN])
    ;;
  *darwin*)
    ccsys_OS_DARWIN=yes
    AC_MSG_NOTICE([detected OS: DARWIN])
    ;;
esac
AM_CONDITIONAL([ON_LINUX], [test "x$ccsys_OS_LINUX"  = xyes])
AM_CONDITIONAL([ON_BSD],   [test "x$ccsys_OS_BSD"    = xyes])
AM_CONDITIONAL([ON_CYGWIN],[test "x$ccsys_OS_CYGWIN" = xyes])
AM_CONDITIONAL([ON_DARWIN],[test "x$ccsys_OS_DARWIN" = xyes])

AM_COND_IF([ON_DARWIN],[AC_DEFINE([CCSYS_ON_DARWIN],[1],[defined to 1 when compiling on Darwin])])

dnl page
#### libraries interface version

AS_VAR_SET([SLACKSTUFF_PACKAGE_VERSION],[0.1d0.0])
AC_SUBST([SLACKSTUFF_PACKAGE_VERSION])

dnl This is the version stored in the pkg-config data file.
AC_SUBST([CCSYS_PKG_CONFIG_VERSION],[0.1])

MM_LIBTOOL_LIBRARY_VERSIONS([ccsys],1,0,0)

dnl page
#### external libraries

PKG_CHECK_MODULES([CCEXCEPTIONS],[ccexceptions >= 0.6])

AC_CACHE_SAVE

dnl page
#### basic system inspection

AC_LANG([C])
AC_PROG_CC_C99
AX_CHECK_COMPILE_FLAG([-std=c11],[],[AC_MSG_ERROR([*** Compiler does not support -std=c11])],[-pedantic])

AS_VAR_SET(AX_CFLAGS,[-std=c11])
AS_VAR_APPEND(AX_CFLAGS,[" -Wall -Wextra"])
AX_GCC_VERSION
AS_IF([test "x$GCC" = "xyes"],
  [AS_CASE("$GCC_VERSION",
     [7.*],[AS_VAR_APPEND(AX_CFLAGS,[" -pedantic -Wduplicated-cond -Wduplicated-branches -Wlogical-op -Wrestrict -Wnull-dereference -Wjump-misses-init -Wdouble-promotion -Wshadow -Wformat=2 -Wmisleading-indentation"])])])
AC_SUBST(AX_CFLAGS)

AM_PROG_AS
AC_PROG_CC
AM_PROG_CC_C_O
AC_HEADER_STDC
AC_CHECK_HEADERS([assert.h stdint.h stddef.h setjmp.h memory.h limits.h utime.h fcntl.h dirent.h time.h])
AC_CHECK_HEADERS([sys/select.h sys/stat.h sys/time.h sys/types.h sys/uio.h sys/mman.h sys/wait.h])
AC_CHECK_HEADERS([netdb.h netinet/in.h arpa/inet.h sys/socket.h sys/un.h])
AC_HEADER_STDBOOL

dnl The  documentation of GNU  Autoconf states that AC_PROG_CC  sets the
dnl variable "GCC" to "yes" if the selected compiler is GCC.
AM_CONDITIONAL([WANT_GCC],[test "x$GCC" = xyes])

AC_CACHE_SAVE

dnl page
#### checks for library functions

AC_DEFINE([_POSIX_C_SOURCE],[200809L],[Request enabling latest POSIX features.])
AC_DEFINE([_GNU_SOURCE],[1],[enable everything GNU])

AC_FUNC_MALLOC

AC_CHECK_FUNCS([mlock munlock mlockall munlockall])
AC_CHECK_FUNCS([open openat close read pread write pwrite lseek readv writev])
AC_CHECK_FUNCS([select dup dup2 pipe mkfifo mkfifoat])
AC_CHECK_FUNCS([mmap munmap msync mprotect])
AC_CHECK_FUNCS([getcwd chdir fchdir opendir fdopendir readdir closedir dirfd stat fstat lstat mkdir rmdir link linkat symlink symlinkat readlink readlinkat realpath unlink unlinkat remove rename chown fchown lchown fchownat chmod fchmod fchmodat access faccessat utime utimes truncate ftruncate])
AC_CHECK_FUNCS([mkstemp])
AC_CHECK_FUNCS([bind getsockname inet_network socket shutdown socketpair connect listen accept getpeername send recv sendto recvfrom getsockopt setsockopt])
AC_CHECK_FUNCS([system exit fork execv execve execvp waitpid])

dnl GNU C library stuff

dnl AC_CHECK_HEADERS([search.h])
AC_CHECK_FUNCS([mkdtemp mremap madvise inet_aton])
dnl AC_CHECK_FUNCS([gethostbyname_r gethostbyname2_r gethostbyaddr_r])

dnl Linux stuff
AC_CHECK_FUNCS([lutimes futimes])

AC_CACHE_SAVE

dnl page
#### inspection of data types_t

CCSYS_UINT_TYPE_ALIAS([SIZE_T],[size_t],[CCSYS_STDDEF_HEADER])
CCSYS_INT_TYPE_ALIAS([SSIZE_T],[ssize_t],[CCSYS_UNISTD_HEADER])
CCSYS_INT_TYPE_ALIAS([PTRDIFF_T],[ptrdiff_t],[CCSYS_STDDEF_HEADER])

CCSYS_INT_TYPE_ALIAS([MODE_T],[mode_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([OFF_T],[off_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([INO_T],[ino_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([DEV_T],[dev_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([NLINK_T],[nlink_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([BLKSIZE_T],[blksize_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([BLKCNT_T],[blkcnt_t],[CCSYS_SYS_TYPES_HEADER])

CCSYS_INT_TYPE_ALIAS([PID_T],[pid_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([UID_T],[uid_t],[CCSYS_SYS_TYPES_HEADER])
CCSYS_INT_TYPE_ALIAS([GID_T],[gid_t],[CCSYS_SYS_TYPES_HEADER])

CCSYS_INT_TYPE_ALIAS([SOCKLEN_T],[socklen_t],[CCSYS_UNISTD_HEADER])

AC_CACHE_SAVE

dnl page
#### inspection of data structures

CCSYS_SIZEOF([STRUCT_DIRENT],[struct dirent],[CCSYS_DIRENT_HEADER])
CCSYS_OFFSETOF([STRUCT_DIRENT_D_NAME],[struct dirent],[d_name],[CCSYS_DIRENT_HEADER])

CCSYS_SIZEOF([STRUCT_IOVEC],[struct iovec],[CCSYS_SYS_UIO_HEADER])
CCSYS_OFFSETOF([STRUCT_IOVEC_IOV_BASE],[struct iovec],[iov_base],[CCSYS_SYS_UIO_HEADER])
CCSYS_OFFSETOF([STRUCT_IOVEC_IOV_LEN], [struct iovec],[iov_len],[CCSYS_SYS_UIO_HEADER])

CCSYS_SIZEOF([STRUCT_STAT],[struct stat],[CCSYS_SYS_STAT_HEADER])

AC_CHECK_MEMBER(struct stat.st_dev,
  [AS_VAR_SET(CCSYS_STRUCT_STAT_HAS_ST_DEV,1)],
  [AS_VAR_SET(CCSYS_STRUCT_STAT_HAS_ST_DEV,0)],
  [CCSYS_SYS_STAT_HEADER])

dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_DEV],[struct stat],[st_dev],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_MODE],[struct stat],[st_mode],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_INO],[struct stat],[st_ino],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_NLINK],[struct stat],[st_nlink],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_UID],[struct stat],[st_uid],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_GID],[struct stat],[st_gid],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_SIZE],[struct stat],[st_size],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_INO],[struct stat],[st_ino],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_ATIM_TV_SEC],[struct stat],[st_atim.tv_sec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_MTIM_TV_SEC],[struct stat],[st_mtim.tv_sec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_CTIM_TV_SEC],[struct stat],[st_ctim.tv_sec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_ATIM_TV_NSEC],[struct stat],[st_atim.tv_nsec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_MTIM_TV_NSEC],[struct stat],[st_mtim.tv_nsec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_CTIM_TV_NSEC],[struct stat],[st_ctim.tv_nsec],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_BLOCKS],[struct stat],[st_blocks],[CCSYS_SYS_STAT_HEADER])
dnl CCSYS_OFFSETOF([STRUCT_STAT_ST_BLKSIZE],[struct stat],[st_blksize],[CCSYS_SYS_STAT_HEADER])

CCSYS_SIZEOF([STRUCT_UTIMBUF],[struct utimbuf],[CCSYS_UTIME_HEADER])

CCSYS_SIZEOF([STRUCT_HOSTENT],[struct hostent],[CCSYS_NETDB_HEADER])

CCSYS_SIZEOF([STRUCT_IN_ADDR],[struct in_addr],[CCSYS_NETINET_IN_HEADER])
CCSYS_SIZEOF([STRUCT_SOCKADDR],[struct sockaddr],[CCSYS_NETINET_IN_HEADER])
CCSYS_SIZEOF([STRUCT_SOCKADDR_IN],[struct sockaddr_in],[CCSYS_NETINET_IN_HEADER])
CCSYS_SIZEOF([STRUCT_SOCKADDR_IN6],[struct sockaddr_in6],[CCSYS_NETINET_IN_HEADER])
CCSYS_SIZEOF([STRUCT_SOCKADDR_UN],[struct sockaddr_un],[CCSYS_SYS_UN_HEADER])

CCSYS_SIZEOF([STRUCT_TIMEVAL],[struct timeval],[CCSYS_TIME_HEADER])
CCSYS_SIZEOF([STRUCT_TIMESPEC],[struct timespec],[CCSYS_TIME_HEADER])

CCSYS_SIZEOF([STRUCT_FD_SET],[fd_set],[CCSYS_SYS_TYPES_HEADER])

AC_CACHE_SAVE

dnl page
#### system constants

# Open modes.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_CREAT],[O_CREAT],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_DIRECTORY],[O_DIRECTORY],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_DIRECT],[O_DIRECT],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_DSYNC],[O_DSYNC],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_EXCL],[O_EXCL],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_LARGEFILE],[O_LARGEFILE],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NDELAY],[O_NDELAY],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NOATIME],[O_NOATIME],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NOCTTY],[O_NOCTTY],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NOFOLLOW],[O_NOFOLLOW],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NONBLOCK],[O_NONBLOCK],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_PATH],[O_PATH],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_SYNC],[O_SYNC],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_TMPFILE],[O_TMPFILE],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_TRUNC],[O_TRUNC],[CCSYS_FCNTL_HEADER])

# Access modes.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_RDONLY],[O_RDONLY],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_WRONLY],[O_WRONLY],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_RDWR],[O_RDWR],[CCSYS_FCNTL_HEADER])

# Operating modes.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_APPEND],[O_APPEND],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_ASYNC],[O_ASYNC],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_CLOEXEC],[O_CLOEXEC],[CCSYS_FCNTL_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_O_NOATIME],[O_NOATIME],[CCSYS_FCNTL_HEADER])

# Permissions.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IRUSR],[S_IRUSR],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IWUSR],[S_IWUSR],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IXUSR],[S_IXUSR],[CCSYS_SYS_STAT_HEADER])

CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IRGRP],[S_IRGRP],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IWGRP],[S_IWGRP],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IXGRP],[S_IXGRP],[CCSYS_SYS_STAT_HEADER])

CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IROTH],[S_IROTH],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IWOTH],[S_IWOTH],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IXOTH],[S_IXOTH],[CCSYS_SYS_STAT_HEADER])

CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IRWXU],[S_IRWXU],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IRWXG],[S_IRWXG],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_IRWXO],[S_IRWXO],[CCSYS_SYS_STAT_HEADER])

CCSYS_MAYBE_ENUM_DEF([CCSYS_S_ISUID],[S_ISUID],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_ISGID],[S_ISGID],[CCSYS_SYS_STAT_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_S_ISVTX],[S_ISVTX],[CCSYS_SYS_STAT_HEADER])

# Seek constants.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_SEEK_SET],[SEEK_SET],[CCSYS_UNISTD_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SEEK_CUR],[SEEK_CUR],[CCSYS_UNISTD_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SEEK_END],[SEEK_END],[CCSYS_UNISTD_HEADER])

# Flags for "unlinkat(2)".
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_AT_REMOVEDIR],[AT_REMOVEDIR],[CCSYS_FCNTL_HEADER])

# Socket  namespaces.   On  GNU+Linux   systems,  see  the  manual  page
# "socket(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_STREAM],[SOCK_STREAM],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_DGRAM],[SOCK_DGRAM],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_SEQPACKET],[SOCK_SEQPACKET],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_RAW],[SOCK_RAW],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_RDM],[SOCK_RDM],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_SOCK_PACKET],[SOCK_PACKET],[CCSYS_SYS_SOCKET_HEADER])

# Socket styles  or types.   On GNU+Linux systems,  see the  manual page
# "socket(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_UNIX],[AF_UNIX],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_LOCAL],[AF_LOCAL],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_INET],[AF_INET],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_INET6],[AF_INET6],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_IPX],[AF_IPX],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_NETLINK],[AF_NETLINK],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_X25],[AF_X25],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_AX25],[AF_AX25],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_ATMPVC],[AF_ATMPVC],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_APPLETALK],[AF_APPLETALK],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_PACKET],[AF_PACKET],[CCSYS_SYS_SOCKET_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_AF_ALG],[AF_ALG],[CCSYS_SYS_SOCKET_HEADER])

# Socket  protocols.    On  GNU+Linux  systems,  see   the  manual  page
# "protocols(5)" for the full list.
#
AC_SUBST([CCSYS_ENUM_DEF_CCSYS_SOCK_PROTOCOL_IP],[CCSYS_SOCK_PROTOCOL_IP=0[],])

# Flags for  "mlockall(2)".  On GNU+Linux  systems, see the  manual page
# "mlockall(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_MCL_CURRENT],[MCL_CURRENT],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MCL_FUTURE],[MCL_FUTURE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MCL_ONFAULT],[MCL_ONFAULT],[CCSYS_SYS_MMAN_HEADER])

# Protection specification for "mmap(2)".  On GNU+Linux systems, see the
# manual page "mmap(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_PROT_EXEC],[PROT_EXEC],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_PROT_READ],[PROT_READ],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_PROT_WRITE],[PROT_WRITE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_PROT_NONE],[PROT_NONE],[CCSYS_SYS_MMAN_HEADER])

# Flags  for  "mmap(2)".  On  GNU+Linux  systems,  see the  manual  page
# "mmap(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_SHARED],[MAP_SHARED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_PRIVATE],[MAP_PRIVATE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_32BIT],[MAP_32BIT],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_ANON],[MAP_ANON],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_ANONYMOUS],[MAP_ANONYMOUS],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_DENYWRITE],[MAP_DENYWRITE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_EXECUTABLE],[MAP_EXECUTABLE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_FILE],[MAP_FILE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_FIXED],[MAP_FIXED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_GROWSDOWN],[MAP_GROWSDOWN],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_HUGETLB],[MAP_HUGETLB],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_HUGE_2MB],[MAP_HUGE_2MB],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_HUGE_1GB],[MAP_HUGE_1GB],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_LOCKED],[MAP_LOCKED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_NONBLOCK],[MAP_NONBLOCK],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_NORESERVE],[MAP_NORESERVE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_POPULATE],[MAP_POPULATE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_STACK],[MAP_STACK],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_UNINITIALIZED],[MAP_UNINITIALIZED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_AUTOGROW],[MAP_AUTOGROW],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_AUTORESRV],[MAP_AUTORESRV],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_COPY],[MAP_COPY],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MAP_LOCAL],[MAP_LOCAL],[CCSYS_SYS_MMAN_HEADER])

# Flags  for "msync(2)".   On  GNU+Linux systems,  see  the manual  page
# "msync(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_MS_ASYNC],[MS_ASYNC],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MS_SYNC],[MS_SYNC],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MS_INVALIDATE],[MS_INVALIDATE],[CCSYS_SYS_MMAN_HEADER])

# Flags  for "mremap(2)".   On GNU+Linux  systems, see  the manual  page
# "mremap(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_MREMAP_MAYMOVE],[MREMAP_MAYMOVE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MREMAP_FIXED],[MREMAP_FIXED],[CCSYS_SYS_MMAN_HEADER])

# Flags for  "madvise(2)".  On  GNU+Linux systems,  see the  manual page
# "madvise(2)" for the full list.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_NORMAL],[MADV_NORMAL],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_RANDOM],[MADV_RANDOM],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_SEQUENTIAL],[MADV_SEQUENTIAL],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_WILLNEED],[MADV_WILLNEED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_DONTNEED],[MADV_DONTNEED],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_REMOVE],[MADV_REMOVE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_DONTFORK],[MADV_DONTFORK],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_DOFORK],[MADV_DOFORK],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_HWPOISON],[MADV_HWPOISON],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_MERGEABLE],[MADV_MERGEABLE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_UNMERGEABLE],[MADV_UNMERGEABLE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_SOFT_OFFLINE],[MADV_SOFT_OFFLINE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_HUGEPAGE],[MADV_HUGEPAGE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_NOHUGEPAGE],[MADV_NOHUGEPAGE],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_DONTDUMP],[MADV_DONTDUMP],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_DODUMP],[MADV_DODUMP],[CCSYS_SYS_MMAN_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_MADV_FREE],[MADV_FREE],[CCSYS_SYS_MMAN_HEADER])

# Exit statuses modes.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_EXIT_SUCCESS],[EXIT_SUCCESS],[CCSYS_STDLIB_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_EXIT_FAILURE],[EXIT_FAILURE],[CCSYS_STDLIB_HEADER])

# Process wait options.
#
CCSYS_MAYBE_ENUM_DEF([CCSYS_WNOHANG],[WNOHANG],[CCSYS_STDLIB_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_WUNTRACED],[WUNTRACED],[CCSYS_STDLIB_HEADER])
CCSYS_MAYBE_ENUM_DEF([CCSYS_WCONTINUED],[WCONTINUED],[CCSYS_STDLIB_HEADER])

dnl page
#### finish

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile]
   [src/ccsys.h]
   [meta/scripts/ccsys.pc]
   [meta/slackstuff/config]
   [meta/slackware/slack-desc])
AC_OUTPUT

### end of file
# Local Variables:
# mode: autoconf
# page-delimiter: "^dnl page"
# End:
