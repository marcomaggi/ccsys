/*
  Part of: CCSys
  Contents: public header file
  Date: Sat Dec 17, 2016

  Abstract

	This is the  main header: it must be included  in all the source
	files  using  CCSys.   Notice  that the  code  needs  the  POSIX
	features, so it defines the following symbol:

	   #define _POSIX_C_SOURCE 200809L

  Copyright (C) 2016, 2017, 2018 Marco Maggi <marco.maggi-ipsu@poste.it>

  This program is  free software: you can redistribute  it and/or modify
  it  under the  terms  of  the GNU  Lesser  General  Public License  as
  published by  the Free  Software Foundation, either  version 3  of the
  License, or (at your option) any later version.

  This program  is distributed in the  hope that it will  be useful, but
  WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
  MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
  General Public License for more details.

  You  should have  received a  copy of  the GNU  Lesser General  Public
  License     along    with     this    program.      If    not,     see
  <http://www.gnu.org/licenses/>.
*/

#ifndef CCSYS_H
#define CCSYS_H 1


/** --------------------------------------------------------------------
 ** Preliminary definitions.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* The macro  CCSYS_UNUSED indicates that a  function, function argument
   or variable may potentially be unused. Usage examples:

   static int unused_function (char arg) CCSYS_UNUSED;
   int foo (char unused_argument CCSYS_UNUSED);
   int unused_variable CCSYS_UNUSED;
*/
#ifdef __GNUC__
#  define CCSYS_UNUSED		__attribute__((unused))
#else
#  define CCSYS_UNUSED		/* empty */
#endif

#ifndef __GNUC__
#  define __attribute__(...)	/* empty */
#endif

#ifndef __GNUC__
#  define __builtin_expect(...)	/* empty */
#endif

#if defined _WIN32 || defined __CYGWIN__
#  ifdef BUILDING_DLL
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllexport)) extern
#    else
#      define ccsys_decl		__declspec(dllexport) extern
#    endif
#  else
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllimport)) extern
#    else
#      define ccsys_decl		__declspec(dllimport) extern
#    endif
#  endif
#  define ccsys_private_decl	extern
#else
#  if __GNUC__ >= 4
#    define ccsys_decl		__attribute__((visibility ("default"))) extern
#    define ccsys_private_decl	__attribute__((visibility ("hidden")))  extern
#  else
#    define ccsys_decl		extern
#    define ccsys_private_decl	extern
#  endif
#endif


/** --------------------------------------------------------------------
 ** Helper macros.
 ** ----------------------------------------------------------------- */

/* Pointer cast macro helper. */
#define CCSYS_PC(TYPE,X,Y)		TYPE * X = (TYPE *) (Y)

#define CCSYS_STRUCT_GETTER(STEM,STRUCT_TYPE,FIELD_TYPE)		\
  ccsys_decl FIELD_TYPE ccsys_ref_ ## STEM (STRUCT_TYPE const * S)	\
    __attribute__((__nonnull__(1),__pure__));

#define CCSYS_STRUCT_SETTER(STEM,STRUCT_TYPE,FIELD_TYPE)		\
  ccsys_decl void ccsys_set_ ## STEM (STRUCT_TYPE * S, FIELD_TYPE F)	\
    __attribute__((__nonnull__(1)));

#define CCSYS_STRUCT_ACCESSORS(STEM,STRUCT_TYPE,FIELD_TYPE)	\
  CCSYS_STRUCT_GETTER(STEM,STRUCT_TYPE,FIELD_TYPE)		\
  CCSYS_STRUCT_SETTER(STEM,STRUCT_TYPE,FIELD_TYPE)

/* ------------------------------------------------------------------ */

#define CCSYS_ON_LINUX		@CCSYS_ON_LINUX@
#define CCSYS_ON_BSD		@CCSYS_ON_BSD@
#define CCSYS_ON_CYGWIN		@CCSYS_ON_CYGWIN@
#define CCSYS_ON_DARWIN		@CCSYS_ON_DARWIN@


/** --------------------------------------------------------------------
 ** Headers.
 ** ----------------------------------------------------------------- */

#include <ccexceptions.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>


/** --------------------------------------------------------------------
 ** Semantic type definitions.
 ** ----------------------------------------------------------------- */

#define ccsys_dref(D)		((int)		((D).data))
#define ccsys_udref(D)		((unsigned int)	((D).data))
#define ccsys_lref(D)		((long)		((D).data))
#define ccsys_ulref(D)		((unsigned long)((D).data))

/* ------------------------------------------------------------------ */

typedef struct ccsys_blkcnt_t			ccsys_blkcnt_t;
typedef struct ccsys_blksize_t			ccsys_blksize_t;
typedef struct ccsys_dev_t			ccsys_dev_t;
typedef struct ccsys_dirfd_t			ccsys_dirfd_t;
typedef struct ccsys_exit_status_t		ccsys_exit_status_t;
typedef struct ccsys_fd_flags_t			ccsys_fd_flags_t;
typedef struct ccsys_fd_t			ccsys_fd_t;
typedef struct ccsys_fstatat_flags_t		ccsys_fstatat_flags_t;
typedef struct ccsys_gid_t			ccsys_gid_t;
typedef struct ccsys_ino_t			ccsys_ino_t;
typedef struct ccsys_linkat_flags_t		ccsys_linkat_flags_t;
typedef struct ccsys_madvise_advice_t		ccsys_madvise_advice_t;
typedef struct ccsys_mlockall_flags_t		ccsys_mlockall_flags_t;
typedef struct ccsys_mmap_flags_t		ccsys_mmap_flags_t;
typedef struct ccsys_mmap_prot_t		ccsys_mmap_prot_t;
typedef struct ccsys_mremap_flags_t		ccsys_mremap_flags_t;
typedef struct ccsys_msync_flags_t		ccsys_msync_flags_t;
typedef struct ccsys_nlink_t			ccsys_nlink_t;
typedef struct ccsys_off_t			ccsys_off_t;
typedef struct ccsys_open_flags_t		ccsys_open_flags_t;
typedef struct ccsys_open_mode_t		ccsys_open_mode_t;
typedef struct ccsys_pid_t			ccsys_pid_t;
typedef struct ccsys_renameat2_flags_t		ccsys_renameat2_flags_t;
typedef struct ccsys_scatter_gather_flags_t	ccsys_scatter_gather_flags_t;
typedef struct ccsys_signum_t			ccsys_signum_t;
typedef struct ccsys_socket_namespace_t		ccsys_socket_namespace_t;
typedef struct ccsys_socket_protocol_t		ccsys_socket_protocol_t;
typedef struct ccsys_socket_style_t		ccsys_socket_style_t;
typedef struct ccsys_socklen_t			ccsys_socklen_t;
typedef struct ccsys_stat_mode_t		ccsys_stat_mode_t;
typedef struct ccsys_uid_t			ccsys_uid_t;
typedef struct ccsys_unlinkat_flags_t		ccsys_unlinkat_flags_t;
typedef struct ccsys_waitpid_options_t		ccsys_waitpid_options_t;
typedef struct ccsys_waitpid_status_t		ccsys_waitpid_status_t;
typedef struct ccsys_whence_t			ccsys_whence_t;

struct ccsys_blkcnt_t			{ @CCSYS_TYPE_BLKCNT_T@		data; };
struct ccsys_blksize_t			{ @CCSYS_TYPE_BLKSIZE_T@	data; };
struct ccsys_dev_t			{ @CCSYS_TYPE_DEV_T@		data; };
struct ccsys_dirfd_t			{ int				data; };
struct ccsys_exit_status_t		{ int				data; };
struct ccsys_fd_flags_t			{ int				data; };
struct ccsys_fd_t			{ int				data; };
struct ccsys_fstatat_flags_t		{ int				data; };
struct ccsys_gid_t			{ @CCSYS_TYPE_GID_T@		data; };
struct ccsys_ino_t			{ @CCSYS_TYPE_INO_T@		data; };
struct ccsys_linkat_flags_t		{ int				data; };
struct ccsys_madvise_advice_t		{ int				data; };
struct ccsys_mlockall_flags_t		{ int				data; };
struct ccsys_mmap_flags_t		{ int				data; };
struct ccsys_mmap_prot_t		{ int				data; };
struct ccsys_mremap_flags_t		{ int				data; };
struct ccsys_msync_flags_t		{ int				data; };
struct ccsys_nlink_t			{ @CCSYS_TYPE_NLINK_T@		data; };
struct ccsys_off_t			{ @CCSYS_TYPE_OFF_T@		data; };
struct ccsys_open_flags_t		{ int				data; };
struct ccsys_open_mode_t		{ @CCSYS_TYPE_MODE_T@		data; };
struct ccsys_pid_t			{ @CCSYS_TYPE_PID_T@		data; };
struct ccsys_renameat2_flags_t		{ int				data; };
struct ccsys_scatter_gather_flags_t	{ @CCSYS_TYPE_PID_T@		data; };
struct ccsys_signum_t			{ int				data; };
struct ccsys_socket_namespace_t		{ int				data; };
struct ccsys_socket_protocol_t		{ int				data; };
struct ccsys_socket_style_t		{ int				data; };
struct ccsys_socklen_t			{ @CCSYS_TYPE_SOCKLEN_T@	data; };
struct ccsys_stat_mode_t		{ @CCSYS_TYPE_MODE_T@		data; };
struct ccsys_uid_t			{ @CCSYS_TYPE_UID_T@		data; };
struct ccsys_unlinkat_flags_t		{ int				data; };
struct ccsys_waitpid_options_t		{ int				data; };
struct ccsys_waitpid_status_t		{ int				data; };
struct ccsys_whence_t			{ int				data; };

/* ------------------------------------------------------------------ */
/* The ones below are opaque types. */

typedef struct ccsys_dir_t			ccsys_dir_t;


/** --------------------------------------------------------------------
 ** System struct wrappers.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_dirent_t			ccsys_dirent_t;
typedef struct ccsys_fd_set_t			ccsys_fd_set_t;
typedef struct ccsys_hostent_t			ccsys_hostent_t;
typedef struct ccsys_in_addr_t			ccsys_in_addr_t;
typedef struct ccsys_iovec_t			ccsys_iovec_t;
typedef struct ccsys_sigset_t			ccsys_sigset_t;
typedef struct ccsys_sockaddr_in6_t		ccsys_sockaddr_in6_t;
typedef struct ccsys_sockaddr_in_t		ccsys_sockaddr_in_t;
typedef struct ccsys_sockaddr_t			ccsys_sockaddr_t;
typedef struct ccsys_sockaddr_un_t		ccsys_sockaddr_un_t;
typedef struct ccsys_stat_t			ccsys_stat_t;
typedef struct ccsys_utimbuf_t			ccsys_utimbuf_t;

struct ccsys_dirent_t		{ uint8_t data[@SIZEOF_STRUCT_DIRENT@]; };
struct ccsys_fd_set_t		{ uint8_t data[@SIZEOF_STRUCT_FD_SET@]; };
struct ccsys_hostent_t		{ uint8_t data[@SIZEOF_STRUCT_HOSTENT@]; };
struct ccsys_in_addr_t		{ uint8_t data[@SIZEOF_STRUCT_IN_ADDR@]; };
struct ccsys_iovec_t		{ uint8_t data[@SIZEOF_STRUCT_IOVEC@]; };
struct ccsys_sigset_t		{ uint8_t data[@SIZEOF_SIGSET_T@]; };
struct ccsys_sockaddr_in6_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_IN6@]; };
struct ccsys_sockaddr_in_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_IN@]; };
struct ccsys_sockaddr_t		{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR@]; };
struct ccsys_sockaddr_un_t	{ uint8_t data[@SIZEOF_STRUCT_SOCKADDR_UN@]; };
struct ccsys_stat_t		{ uint8_t data[@SIZEOF_STRUCT_STAT@]; };
struct ccsys_utimbuf_t		{ uint8_t data[@SIZEOF_STRUCT_UTIMBUF@]; };


/** --------------------------------------------------------------------
 ** Type definisions: time handling.
 ** ----------------------------------------------------------------- */

typedef long int			ccsys_time_unit_t;
typedef struct ccsys_seconds_t		ccsys_seconds_t;
typedef struct ccsys_milliseconds_t	ccsys_milliseconds_t;
typedef struct ccsys_microseconds_t	ccsys_microseconds_t;
typedef struct ccsys_nanoseconds_t	ccsys_nanoseconds_t;
typedef struct ccsys_timeval_t		ccsys_timeval_t;
typedef struct ccsys_timespec_t		ccsys_timespec_t;

struct ccsys_seconds_t		{ ccsys_time_unit_t data; };
struct ccsys_milliseconds_t	{ ccsys_time_unit_t data; };
struct ccsys_microseconds_t	{ ccsys_time_unit_t data; };
struct ccsys_nanoseconds_t	{ ccsys_time_unit_t data; };

struct ccsys_timeval_t {
  ccsys_seconds_t	seconds;
  ccsys_microseconds_t	microseconds;
};

struct ccsys_timespec_t {
  ccsys_seconds_t	seconds;
  ccsys_nanoseconds_t	nanoseconds;
};

/* ------------------------------------------------------------------ */

#define ccsys_set_seconds(S,N)		ccsys_p_set_seconds(&(S),(N))
#define ccsys_set_milliseconds(S,N)	ccsys_p_set_milliseconds(&(S),(N))
#define ccsys_set_microseconds(S,N)	ccsys_p_set_microseconds(&(S),(N))
#define ccsys_set_nanoseconds(S,N)	ccsys_p_set_nanoseconds(&(S),(N))

__attribute__((__always_inline__,__nonnull__(1)))
static inline void
ccsys_p_set_seconds (ccsys_seconds_t * S, ccsys_time_unit_t N)
{
  S->data = N;
}

__attribute__((__always_inline__,__nonnull__(1)))
static inline void
ccsys_p_set_milliseconds (ccsys_milliseconds_t * S, ccsys_time_unit_t N)
{
  S->data = N;
}

__attribute__((__always_inline__,__nonnull__(1)))
static inline void
ccsys_p_set_microseconds (ccsys_microseconds_t * S, ccsys_time_unit_t N)
{
  S->data = N;
}

__attribute__((__always_inline__,__nonnull__(1)))
static inline void
ccsys_p_set_nanoseconds (ccsys_nanoseconds_t * S, ccsys_time_unit_t N)
{
  S->data = N;
}


/** --------------------------------------------------------------------
 ** System constants.
 ** ----------------------------------------------------------------- */

enum ccsys_limits_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_PATH_MAX@
  CCSYS_LIMITS_ENUM_LAST_VALUE
};

enum ccsys_exit_status_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_EXIT_SUCCESS@
  @CCSYS_ENUM_DEF_CCSYS_EXIT_FAILURE@
};

enum ccsys_open_flags_enum_t {
  /* Access modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_RDONLY@
  @CCSYS_ENUM_DEF_CCSYS_O_WRONLY@
  @CCSYS_ENUM_DEF_CCSYS_O_RDWR@

  /* Open modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_CREAT@
  @CCSYS_ENUM_DEF_CCSYS_O_DIRECT@
  @CCSYS_ENUM_DEF_CCSYS_O_DIRECTORY@
  @CCSYS_ENUM_DEF_CCSYS_O_DSYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_EXCL@
  @CCSYS_ENUM_DEF_CCSYS_O_LARGEFILE@
  @CCSYS_ENUM_DEF_CCSYS_O_NDELAY@
  @CCSYS_ENUM_DEF_CCSYS_O_NOCTTY@
  @CCSYS_ENUM_DEF_CCSYS_O_NOFOLLOW@
  @CCSYS_ENUM_DEF_CCSYS_O_NONBLOCK@
  @CCSYS_ENUM_DEF_CCSYS_O_PATH@
  @CCSYS_ENUM_DEF_CCSYS_O_SYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_TMPFILE@
  @CCSYS_ENUM_DEF_CCSYS_O_TRUNC@

  /* Operating modes. */
  @CCSYS_ENUM_DEF_CCSYS_O_APPEND@
  @CCSYS_ENUM_DEF_CCSYS_O_ASYNC@
  @CCSYS_ENUM_DEF_CCSYS_O_CLOEXEC@
  @CCSYS_ENUM_DEF_CCSYS_O_NOATIME@
};

enum ccsys_open_mode_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_S_IRUSR@
  @CCSYS_ENUM_DEF_CCSYS_S_IWUSR@
  @CCSYS_ENUM_DEF_CCSYS_S_IXUSR@

  @CCSYS_ENUM_DEF_CCSYS_S_IRGRP@
  @CCSYS_ENUM_DEF_CCSYS_S_IWGRP@
  @CCSYS_ENUM_DEF_CCSYS_S_IXGRP@

  @CCSYS_ENUM_DEF_CCSYS_S_IROTH@
  @CCSYS_ENUM_DEF_CCSYS_S_IWOTH@
  @CCSYS_ENUM_DEF_CCSYS_S_IXOTH@

  @CCSYS_ENUM_DEF_CCSYS_S_IRWXU@
  @CCSYS_ENUM_DEF_CCSYS_S_IRWXG@
  @CCSYS_ENUM_DEF_CCSYS_S_IRWXO@

  @CCSYS_ENUM_DEF_CCSYS_S_ISUID@
  @CCSYS_ENUM_DEF_CCSYS_S_ISGID@
  @CCSYS_ENUM_DEF_CCSYS_S_ISVTX@
};

enum ccsys_fd_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_FD_CLOEXEC@
  CCSYS_FD_FLAGS_ENUM_LAST_VALUE
};

enum ccsys_whence_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SEEK_SET@
  @CCSYS_ENUM_DEF_CCSYS_SEEK_CUR@
  @CCSYS_ENUM_DEF_CCSYS_SEEK_END@
};

enum ccsys_scatter_gather_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_RWF_HIPRI@
  @CCSYS_ENUM_DEF_CCSYS_RWF_NOWAIT@
  CCSYS_SCATTER_GATHER_FLAGS_ENUM_LAST_VALUE
};

enum ccsys_unlinkat_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_AT_REMOVEDIR@
};

enum ccsys_at_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_AT_EMPTY_PATH@
  @CCSYS_ENUM_DEF_CCSYS_AT_NO_AUTOMOUNT@
  @CCSYS_ENUM_DEF_CCSYS_AT_SYMLINK_FOLLOW@
  @CCSYS_ENUM_DEF_CCSYS_AT_SYMLINK_NOFOLLOW@
};

enum ccsys_stat_mode_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_S_IFMT@
  @CCSYS_ENUM_DEF_CCSYS_S_IFSOCK@
  @CCSYS_ENUM_DEF_CCSYS_S_IFLNK@
  @CCSYS_ENUM_DEF_CCSYS_S_IFREG@
  @CCSYS_ENUM_DEF_CCSYS_S_IFBLK@
  @CCSYS_ENUM_DEF_CCSYS_S_IFDIR@
  @CCSYS_ENUM_DEF_CCSYS_S_IFCHR@
  @CCSYS_ENUM_DEF_CCSYS_S_IFIFO@
};

enum ccsys_renameat2_flags_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_RENAME_EXCHANGE@
  @CCSYS_ENUM_DEF_CCSYS_RENAME_NOREPLACE@
  @CCSYS_ENUM_DEF_CCSYS_RENAME_WHITEOUT@
  CCSYS_RENAMEAT2_FLAGS_ENUM_LAST_VALUE
};

enum ccsys_socket_namespace_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SOCK_DGRAM@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_PACKET@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_RAW@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_RDM@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_SEQPACKET@
  @CCSYS_ENUM_DEF_CCSYS_SOCK_STREAM@
};

enum ccsys_socket_style_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_AF_UNIX@
  @CCSYS_ENUM_DEF_CCSYS_AF_LOCAL@
  @CCSYS_ENUM_DEF_CCSYS_AF_INET@
  @CCSYS_ENUM_DEF_CCSYS_AF_INET6@
  @CCSYS_ENUM_DEF_CCSYS_AF_IPX@
  @CCSYS_ENUM_DEF_CCSYS_AF_NETLINK@
  @CCSYS_ENUM_DEF_CCSYS_AF_X25@
  @CCSYS_ENUM_DEF_CCSYS_AF_AX25@
  @CCSYS_ENUM_DEF_CCSYS_AF_ATMPVC@
  @CCSYS_ENUM_DEF_CCSYS_AF_APPLETALK@
  @CCSYS_ENUM_DEF_CCSYS_AF_PACKET@
  @CCSYS_ENUM_DEF_CCSYS_AF_ALG@
};

enum ccsys_socket_protocol_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SOCK_PROTOCOL_IP@
};

enum ccsys_memory_protection_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_PROT_EXEC@
  @CCSYS_ENUM_DEF_CCSYS_PROT_READ@
  @CCSYS_ENUM_DEF_CCSYS_PROT_WRITE@
  @CCSYS_ENUM_DEF_CCSYS_PROT_NONE@
};

enum ccsys_memory_mapping_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MAP_SHARED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_PRIVATE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_32BIT@
  @CCSYS_ENUM_DEF_CCSYS_MAP_ANON@
  @CCSYS_ENUM_DEF_CCSYS_MAP_ANONYMOUS@
  @CCSYS_ENUM_DEF_CCSYS_MAP_DENYWRITE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_EXECUTABLE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_FILE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_FIXED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_GROWSDOWN@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGETLB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGE_2MB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_HUGE_1GB@
  @CCSYS_ENUM_DEF_CCSYS_MAP_LOCKED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_NONBLOCK@
  @CCSYS_ENUM_DEF_CCSYS_MAP_NORESERVE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_POPULATE@
  @CCSYS_ENUM_DEF_CCSYS_MAP_STACK@
  @CCSYS_ENUM_DEF_CCSYS_MAP_UNINITIALIZED@
  @CCSYS_ENUM_DEF_CCSYS_MAP_AUTOGROW@
  @CCSYS_ENUM_DEF_CCSYS_MAP_AUTORESRV@
  @CCSYS_ENUM_DEF_CCSYS_MAP_COPY@
  @CCSYS_ENUM_DEF_CCSYS_MAP_LOCAL@
};

enum ccsys_memory_locking_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MCL_CURRENT@
  @CCSYS_ENUM_DEF_CCSYS_MCL_FUTURE@
  @CCSYS_ENUM_DEF_CCSYS_MCL_ONFAULT@
};

enum ccsys_memory_sync_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MS_ASYNC@
  @CCSYS_ENUM_DEF_CCSYS_MS_SYNC@
  @CCSYS_ENUM_DEF_CCSYS_MS_INVALIDATE@
};

enum ccsys_memory_remap_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MREMAP_MAYMOVE@
  @CCSYS_ENUM_DEF_CCSYS_MREMAP_FIXED@
};

enum ccsys_memory_advice_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_MADV_NORMAL@
  @CCSYS_ENUM_DEF_CCSYS_MADV_RANDOM@
  @CCSYS_ENUM_DEF_CCSYS_MADV_SEQUENTIAL@
  @CCSYS_ENUM_DEF_CCSYS_MADV_WILLNEED@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTNEED@
  @CCSYS_ENUM_DEF_CCSYS_MADV_REMOVE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTFORK@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DOFORK@
  @CCSYS_ENUM_DEF_CCSYS_MADV_HWPOISON@
  @CCSYS_ENUM_DEF_CCSYS_MADV_MERGEABLE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_UNMERGEABLE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_SOFT_OFFLINE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_HUGEPAGE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_NOHUGEPAGE@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DONTDUMP@
  @CCSYS_ENUM_DEF_CCSYS_MADV_DODUMP@
  @CCSYS_ENUM_DEF_CCSYS_MADV_FREE@
};

enum ccsys_waitpid_options_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_WNOHANG@
  @CCSYS_ENUM_DEF_CCSYS_WUNTRACED@
  @CCSYS_ENUM_DEF_CCSYS_WCONTINUED@
};

enum ccsys_errno_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_E2BIG@
  @CCSYS_ENUM_DEF_CCSYS_EACCES@
  @CCSYS_ENUM_DEF_CCSYS_EADDRINUSE@
  @CCSYS_ENUM_DEF_CCSYS_EADDRNOTAVAIL@
  @CCSYS_ENUM_DEF_CCSYS_EADV@
  @CCSYS_ENUM_DEF_CCSYS_EAFNOSUPPORT@
  @CCSYS_ENUM_DEF_CCSYS_EAGAIN@
  @CCSYS_ENUM_DEF_CCSYS_EALREADY@
  @CCSYS_ENUM_DEF_CCSYS_EAUTH@
  @CCSYS_ENUM_DEF_CCSYS_EBACKGROUND@
  @CCSYS_ENUM_DEF_CCSYS_EBADE@
  @CCSYS_ENUM_DEF_CCSYS_EBADF@
  @CCSYS_ENUM_DEF_CCSYS_EBADFD@
  @CCSYS_ENUM_DEF_CCSYS_EBADMSG@
  @CCSYS_ENUM_DEF_CCSYS_EBADR@
  @CCSYS_ENUM_DEF_CCSYS_EBADRPC@
  @CCSYS_ENUM_DEF_CCSYS_EBADRQC@
  @CCSYS_ENUM_DEF_CCSYS_EBADSLT@
  @CCSYS_ENUM_DEF_CCSYS_EBFONT@
  @CCSYS_ENUM_DEF_CCSYS_EBUSY@
  @CCSYS_ENUM_DEF_CCSYS_ECANCELED@
  @CCSYS_ENUM_DEF_CCSYS_ECHILD@
  @CCSYS_ENUM_DEF_CCSYS_ECHRNG@
  @CCSYS_ENUM_DEF_CCSYS_ECOMM@
  @CCSYS_ENUM_DEF_CCSYS_ECONNABORTED@
  @CCSYS_ENUM_DEF_CCSYS_ECONNREFUSED@
  @CCSYS_ENUM_DEF_CCSYS_ECONNRESET@
  @CCSYS_ENUM_DEF_CCSYS_EDEADLK@
  @CCSYS_ENUM_DEF_CCSYS_EDEADLOCK@
  @CCSYS_ENUM_DEF_CCSYS_EDESTADDRREQ@
  @CCSYS_ENUM_DEF_CCSYS_EDIED@
  @CCSYS_ENUM_DEF_CCSYS_EDOM@
  @CCSYS_ENUM_DEF_CCSYS_EDOTDOT@
  @CCSYS_ENUM_DEF_CCSYS_EDQUOT@
  @CCSYS_ENUM_DEF_CCSYS_EEXIST@
  @CCSYS_ENUM_DEF_CCSYS_EFAULT@
  @CCSYS_ENUM_DEF_CCSYS_EFBIG@
  @CCSYS_ENUM_DEF_CCSYS_EFTYPE@
  @CCSYS_ENUM_DEF_CCSYS_EHOSTDOWN@
  @CCSYS_ENUM_DEF_CCSYS_EHOSTUNREACH@
  @CCSYS_ENUM_DEF_CCSYS_EHWPOISON@
  @CCSYS_ENUM_DEF_CCSYS_EIDRM@
  @CCSYS_ENUM_DEF_CCSYS_EILSEQ@
  @CCSYS_ENUM_DEF_CCSYS_EINPROGRESS@
  @CCSYS_ENUM_DEF_CCSYS_EINTR@
  @CCSYS_ENUM_DEF_CCSYS_EINVAL@
  @CCSYS_ENUM_DEF_CCSYS_EIO@
  @CCSYS_ENUM_DEF_CCSYS_EISCONN@
  @CCSYS_ENUM_DEF_CCSYS_EISDIR@
  @CCSYS_ENUM_DEF_CCSYS_EISNAM@
  @CCSYS_ENUM_DEF_CCSYS_EKEYEXPIRED@
  @CCSYS_ENUM_DEF_CCSYS_EKEYREJECTED@
  @CCSYS_ENUM_DEF_CCSYS_EKEYREVOKED@
  @CCSYS_ENUM_DEF_CCSYS_EL2HLT@
  @CCSYS_ENUM_DEF_CCSYS_EL2NSYNC@
  @CCSYS_ENUM_DEF_CCSYS_EL3HLT@
  @CCSYS_ENUM_DEF_CCSYS_EL3RST@
  @CCSYS_ENUM_DEF_CCSYS_ELIBACC@
  @CCSYS_ENUM_DEF_CCSYS_ELIBBAD@
  @CCSYS_ENUM_DEF_CCSYS_ELIBEXEC@
  @CCSYS_ENUM_DEF_CCSYS_ELIBMAX@
  @CCSYS_ENUM_DEF_CCSYS_ELIBSCN@
  @CCSYS_ENUM_DEF_CCSYS_ELNRNG@
  @CCSYS_ENUM_DEF_CCSYS_ELOOP@
  @CCSYS_ENUM_DEF_CCSYS_EMEDIUMTYPE@
  @CCSYS_ENUM_DEF_CCSYS_EMFILE@
  @CCSYS_ENUM_DEF_CCSYS_EMLINK@
  @CCSYS_ENUM_DEF_CCSYS_EMSGSIZE@
  @CCSYS_ENUM_DEF_CCSYS_EMULTIHOP@
  @CCSYS_ENUM_DEF_CCSYS_ENAMETOOLONG@
  @CCSYS_ENUM_DEF_CCSYS_ENAVAIL@
  @CCSYS_ENUM_DEF_CCSYS_ENEEDAUTH@
  @CCSYS_ENUM_DEF_CCSYS_ENETDOWN@
  @CCSYS_ENUM_DEF_CCSYS_ENETRESET@
  @CCSYS_ENUM_DEF_CCSYS_ENETUNREACH@
  @CCSYS_ENUM_DEF_CCSYS_ENFILE@
  @CCSYS_ENUM_DEF_CCSYS_ENOANO@
  @CCSYS_ENUM_DEF_CCSYS_ENOBUFS@
  @CCSYS_ENUM_DEF_CCSYS_ENOCSI@
  @CCSYS_ENUM_DEF_CCSYS_ENODATA@
  @CCSYS_ENUM_DEF_CCSYS_ENODEV@
  @CCSYS_ENUM_DEF_CCSYS_ENOENT@
  @CCSYS_ENUM_DEF_CCSYS_ENOEXEC@
  @CCSYS_ENUM_DEF_CCSYS_ENOKEY@
  @CCSYS_ENUM_DEF_CCSYS_ENOLCK@
  @CCSYS_ENUM_DEF_CCSYS_ENOLINK@
  @CCSYS_ENUM_DEF_CCSYS_ENOMEDIUM@
  @CCSYS_ENUM_DEF_CCSYS_ENOMEM@
  @CCSYS_ENUM_DEF_CCSYS_ENOMSG@
  @CCSYS_ENUM_DEF_CCSYS_ENONET@
  @CCSYS_ENUM_DEF_CCSYS_ENOPKG@
  @CCSYS_ENUM_DEF_CCSYS_ENOPROTOOPT@
  @CCSYS_ENUM_DEF_CCSYS_ENOSPC@
  @CCSYS_ENUM_DEF_CCSYS_ENOSR@
  @CCSYS_ENUM_DEF_CCSYS_ENOSTR@
  @CCSYS_ENUM_DEF_CCSYS_ENOSYS@
  @CCSYS_ENUM_DEF_CCSYS_ENOTBLK@
  @CCSYS_ENUM_DEF_CCSYS_ENOTCONN@
  @CCSYS_ENUM_DEF_CCSYS_ENOTDIR@
  @CCSYS_ENUM_DEF_CCSYS_ENOTEMPTY@
  @CCSYS_ENUM_DEF_CCSYS_ENOTNAM@
  @CCSYS_ENUM_DEF_CCSYS_ENOTRECOVERABLE@
  @CCSYS_ENUM_DEF_CCSYS_ENOTSOCK@
  @CCSYS_ENUM_DEF_CCSYS_ENOTSUP@
  @CCSYS_ENUM_DEF_CCSYS_ENOTTY@
  @CCSYS_ENUM_DEF_CCSYS_ENOTUNIQ@
  @CCSYS_ENUM_DEF_CCSYS_ENXIO@
  @CCSYS_ENUM_DEF_CCSYS_EOPNOTSUPP@
  @CCSYS_ENUM_DEF_CCSYS_EOVERFLOW@
  @CCSYS_ENUM_DEF_CCSYS_EOWNERDEAD@
  @CCSYS_ENUM_DEF_CCSYS_EPERM@
  @CCSYS_ENUM_DEF_CCSYS_EPFNOSUPPORT@
  @CCSYS_ENUM_DEF_CCSYS_EPIPE@
  @CCSYS_ENUM_DEF_CCSYS_EPROCLIM@
  @CCSYS_ENUM_DEF_CCSYS_EPROCUNAVAIL@
  @CCSYS_ENUM_DEF_CCSYS_EPROGMISMATCH@
  @CCSYS_ENUM_DEF_CCSYS_EPROGUNAVAIL@
  @CCSYS_ENUM_DEF_CCSYS_EPROTO@
  @CCSYS_ENUM_DEF_CCSYS_EPROTONOSUPPORT@
  @CCSYS_ENUM_DEF_CCSYS_EPROTOTYPE@
  @CCSYS_ENUM_DEF_CCSYS_ERANGE@
  @CCSYS_ENUM_DEF_CCSYS_EREMCHG@
  @CCSYS_ENUM_DEF_CCSYS_EREMOTE@
  @CCSYS_ENUM_DEF_CCSYS_EREMOTEIO@
  @CCSYS_ENUM_DEF_CCSYS_ERESTART@
  @CCSYS_ENUM_DEF_CCSYS_ERFKILL@
  @CCSYS_ENUM_DEF_CCSYS_EROFS@
  @CCSYS_ENUM_DEF_CCSYS_ERPCMISMATCH@
  @CCSYS_ENUM_DEF_CCSYS_ESHUTDOWN@
  @CCSYS_ENUM_DEF_CCSYS_ESOCKTNOSUPPORT@
  @CCSYS_ENUM_DEF_CCSYS_ESPIPE@
  @CCSYS_ENUM_DEF_CCSYS_ESRCH@
  @CCSYS_ENUM_DEF_CCSYS_ESRMNT@
  @CCSYS_ENUM_DEF_CCSYS_ESTALE@
  @CCSYS_ENUM_DEF_CCSYS_ESTRPIPE@
  @CCSYS_ENUM_DEF_CCSYS_ETIME@
  @CCSYS_ENUM_DEF_CCSYS_ETIMEDOUT@
  @CCSYS_ENUM_DEF_CCSYS_ETOOMANYREFS@
  @CCSYS_ENUM_DEF_CCSYS_ETXTBSY@
  @CCSYS_ENUM_DEF_CCSYS_EUCLEAN@
  @CCSYS_ENUM_DEF_CCSYS_EUNATCH@
  @CCSYS_ENUM_DEF_CCSYS_EUSERS@
  @CCSYS_ENUM_DEF_CCSYS_EWOULDBLOCK@
  @CCSYS_ENUM_DEF_CCSYS_EXDEV@
  @CCSYS_ENUM_DEF_CCSYS_EXFULL@
};

enum ccsys_signum_enum_t {
  @CCSYS_ENUM_DEF_CCSYS_SIGABRT@
  @CCSYS_ENUM_DEF_CCSYS_SIGALRM@
  @CCSYS_ENUM_DEF_CCSYS_SIGBUS@
  @CCSYS_ENUM_DEF_CCSYS_SIGCHLD@
  @CCSYS_ENUM_DEF_CCSYS_SIGCLD@
  @CCSYS_ENUM_DEF_CCSYS_SIGCONT@
  @CCSYS_ENUM_DEF_CCSYS_SIGEMT@
  @CCSYS_ENUM_DEF_CCSYS_SIGFPE@
  @CCSYS_ENUM_DEF_CCSYS_SIGHUP@
  @CCSYS_ENUM_DEF_CCSYS_SIGILL@
  @CCSYS_ENUM_DEF_CCSYS_SIGINFO@
  @CCSYS_ENUM_DEF_CCSYS_SIGINT@
  @CCSYS_ENUM_DEF_CCSYS_SIGIO@
  @CCSYS_ENUM_DEF_CCSYS_SIGIOT@
  @CCSYS_ENUM_DEF_CCSYS_SIGKILL@
  @CCSYS_ENUM_DEF_CCSYS_SIGLOST@
  @CCSYS_ENUM_DEF_CCSYS_SIGPIPE@
  @CCSYS_ENUM_DEF_CCSYS_SIGPOLL@
  @CCSYS_ENUM_DEF_CCSYS_SIGPROF@
  @CCSYS_ENUM_DEF_CCSYS_SIGQUIT@
  @CCSYS_ENUM_DEF_CCSYS_SIGSEGV@
  @CCSYS_ENUM_DEF_CCSYS_SIGSTOP@
  @CCSYS_ENUM_DEF_CCSYS_SIGSYS@
  @CCSYS_ENUM_DEF_CCSYS_SIGTERM@
  @CCSYS_ENUM_DEF_CCSYS_SIGTRAP@
  @CCSYS_ENUM_DEF_CCSYS_SIGTSTP@
  @CCSYS_ENUM_DEF_CCSYS_SIGTTIN@
  @CCSYS_ENUM_DEF_CCSYS_SIGTTOU@
  @CCSYS_ENUM_DEF_CCSYS_SIGURG@
  @CCSYS_ENUM_DEF_CCSYS_SIGUSR1@
  @CCSYS_ENUM_DEF_CCSYS_SIGUSR2@
  @CCSYS_ENUM_DEF_CCSYS_SIGVRALRM@
  @CCSYS_ENUM_DEF_CCSYS_SIGWINCH@
  @CCSYS_ENUM_DEF_CCSYS_SIGXCPU@
  @CCSYS_ENUM_DEF_CCSYS_SIGXSFZ@
  /* ... */
  @CCSYS_ENUM_DEF_CCSYS_NSIG@
};

/* ------------------------------------------------------------------ */

typedef enum ccsys_at_flags_enum_t		ccsys_at_flags_enum_t;
typedef enum ccsys_errno_enum_t			ccsys_errno_enum_t;
typedef enum ccsys_exit_status_enum_t		ccsys_exit_status_enum_t;
typedef enum ccsys_fd_flags_enum_t		ccsys_fd_flags_enum_t;
typedef enum ccsys_limits_enum_t		ccsys_limits_enum_t;
typedef enum ccsys_memory_advice_enum_t		ccsys_memory_advice_enum_t;
typedef enum ccsys_memory_locking_enum_t	ccsys_memory_locking_enum_t;
typedef enum ccsys_memory_mapping_enum_t	ccsys_memory_mapping_enum_t;
typedef enum ccsys_memory_protection_enum_t	ccsys_memory_protection_enum_t;
typedef enum ccsys_memory_remap_enum_t		ccsys_memory_remap_enum_t;
typedef enum ccsys_memory_sync_enum_t		ccsys_memory_sync_enum_t;
typedef enum ccsys_open_flags_enum_t		ccsys_open_flags_enum_t;
typedef enum ccsys_open_mode_enum_t		ccsys_open_mode_enum_t;
typedef enum ccsys_renameat2_flags_enum_t	ccsys_renameat2_flags_enum_t;
typedef enum ccsys_scatter_gather_flags_enum_t	ccsys_scatter_gather_flags_enum_t;
typedef enum ccsys_signum_enum_t		ccsys_signum_enum_t;
typedef enum ccsys_socket_namespace_enum_t	ccsys_socket_namespace_enum_t;
typedef enum ccsys_socket_protocol_enum_t	ccsys_socket_protocol_enum_t;
typedef enum ccsys_socket_style_enum_t		ccsys_socket_style_enum_t;
typedef enum ccsys_stat_mode_enum_t		ccsys_stat_mode_enum_t;
typedef enum ccsys_unlinkat_flags_enum_t	ccsys_unlinkat_flags_enum_t;
typedef enum ccsys_waitpid_options_enum_t	ccsys_waitpid_options_enum_t;
typedef enum ccsys_whence_enum_t		ccsys_whence_enum_t;


/** --------------------------------------------------------------------
 ** Global constants.
 ** ----------------------------------------------------------------- */

static ccsys_fd_t const CCSYS_FD_STDIN  = { .data = 0 };
static ccsys_fd_t const CCSYS_FD_STDOUT = { .data = 1 };
static ccsys_fd_t const CCSYS_FD_STDERR = { .data = 2 };

static ccsys_fd_t const CCSYS_FD_SETSIZE = { .data = @VALUEOF_CCSYS_FD_SETSIZE@ };

static ccsys_dirfd_t const CCSYS_AT_FDCWD = { .data = @VALUEOF_CCSYS_AT_FDCWD@ };


/** --------------------------------------------------------------------
 ** Version functions.
 ** ----------------------------------------------------------------- */

ccsys_decl char const *	ccsys_version_string		(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_current	(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_revision(void)
  __attribute__((__leaf__,__pure__));
ccsys_decl int		ccsys_version_interface_age	(void)
  __attribute__((__leaf__,__pure__));


/** --------------------------------------------------------------------
 ** Memory allocation.
 ** ----------------------------------------------------------------- */

ccsys_decl void * ccsys_malloc (cce_destination_t L, size_t size)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void * ccsys_realloc (cce_destination_t L, void * ptr, size_t newsize)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void * ccsys_calloc (cce_destination_t L, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1),__returns_nonnull__));

ccsys_decl void ccsys_free (cce_destination_t L CCSYS_UNUSED, void * ptr)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_malloc_init (cce_destination_t L, cce_handler_t * H, void * pointer)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_malloc_init (cce_destination_t L, cce_handler_t * H, void * pointer)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_malloc_init(L,P_H,P) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_malloc_init,	\
	   cce_error_handler_t		*: ccsys_error_handler_malloc_init)(L,&(P_H->handler),P)

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_malloc_guarded_cleanup (cce_destination_t L, cce_cleanup_handler_t * P_H, size_t size)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_malloc_guarded_error   (cce_destination_t L, cce_error_handler_t *   P_H, size_t size)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_malloc_guarded(L,P_H,size) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_malloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_malloc_guarded_error)(L,P_H,size)

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_realloc_guarded_cleanup (cce_destination_t L, cce_cleanup_handler_t * P_H, void * P, size_t newsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_realloc_guarded_error   (cce_destination_t L, cce_error_handler_t *   P_H, void * P, size_t newsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_realloc_guarded(L,P_H,old_P,newsize) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_realloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_realloc_guarded_error)(L,P_H,old_P,newsize)

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_calloc_guarded_cleanup (cce_destination_t L, cce_cleanup_handler_t * P_H, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void * ccsys_calloc_guarded_error   (cce_destination_t L, cce_error_handler_t *   P_H, size_t count, size_t eltsize)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

#define ccsys_calloc_guarded(L,P_H,count,eltsize) \
  _Generic((P_H),								\
	   cce_cleanup_handler_t	*: ccsys_calloc_guarded_cleanup,	\
	   cce_error_handler_t		*: ccsys_calloc_guarded_error)(L,P_H,count,eltsize)


/** --------------------------------------------------------------------
 ** Locking memory pages.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mlock (cce_destination_t L, void const * addr, size_t len)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_munlock (cce_destination_t L, void const * addr, size_t len)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_mlockall (cce_destination_t L, ccsys_mlockall_flags_t flags)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_munlockall (cce_destination_t L)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Memory mapping.
 ** ----------------------------------------------------------------- */

ccsys_decl void * ccsys_mmap (cce_destination_t L, void * address, size_t length,
			      ccsys_mmap_prot_t prot, ccsys_mmap_flags_t flags,
			      ccsys_fd_t filedes, ccsys_off_t offset)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_munmap (cce_destination_t L, void * address, size_t length)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_msync (cce_destination_t L, void * address, size_t length, ccsys_msync_flags_t flags)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_mprotect (cce_destination_t L, void * address, size_t length, ccsys_mmap_prot_t prot)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void * ccsys_mremap (cce_destination_t L, void * old_address, size_t length, size_t new_length,
				ccsys_mremap_flags_t flags, void * new_address)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl void ccsys_madvise (cce_destination_t L, void * address, size_t length, ccsys_madvise_advice_t advice)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** Input/output: file descriptor utilities.
 ** ----------------------------------------------------------------- */

__attribute__((__always_inline__))
static inline bool
ccsys_fd_equal (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  return (fd1.data == fd2.data)? true : false;
}

__attribute__((__always_inline__))
static inline bool
ccsys_fd_less_than (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  return (fd1.data < fd2.data)? true : false;
}

__attribute__((__always_inline__))
static inline bool
ccsys_fd_less_than_or_equal_to (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  return (fd1.data <= fd2.data)? true : false;
}

__attribute__((__always_inline__))
static inline bool
ccsys_fd_greater_than (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  return (fd1.data > fd2.data)? true : false;
}

__attribute__((__always_inline__))
static inline bool
ccsys_fd_greater_than_or_equal_to (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  return (fd1.data >= fd2.data)? true : false;
}

/* ------------------------------------------------------------------ */

__attribute__((__always_inline__))
static inline ccsys_fd_t
ccsys_fd_min (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  ccsys_fd_t	rv = (ccsys_fd_less_than(fd1, fd2))? fd1 : fd2;
  return rv;
}

__attribute__((__always_inline__))
static inline ccsys_fd_t
ccsys_fd_max (ccsys_fd_t fd1, ccsys_fd_t fd2)
{
  ccsys_fd_t	rv = (ccsys_fd_greater_than(fd1, fd2))? fd1 : fd2;
  return rv;
}

/* ------------------------------------------------------------------ */

__attribute__((__always_inline__))
static inline ccsys_fd_t
ccsys_fd_incr (ccsys_fd_t fd)
{
  ccsys_fd_t	rv = { .data = 1 + fd.data };
  return rv;
}


/** --------------------------------------------------------------------
 ** Input/output: opening files.
 ** ----------------------------------------------------------------- */

ccsys_decl ccsys_fd_t ccsys_open (cce_destination_t L, char const * filename,
				  ccsys_open_flags_t flags, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_fd_t ccsys_openat (cce_destination_t L, ccsys_dirfd_t dirfd, char const *filename,
				    ccsys_open_flags_t flags, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1, 3)));


/** --------------------------------------------------------------------
 ** Input/output: creating pipes.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_pipe (cce_destination_t L, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_pipe2 (cce_destination_t L, ccsys_fd_t pipefd[2], ccsys_open_flags_t flags)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_pipedes_init (cce_destination_t L, cce_handler_t * H, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_pipedes_init (cce_destination_t L, cce_handler_t * H, ccsys_fd_t pipefd[2])
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_pipedes_init(L,H,pipefd)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_pipedes_init, \
	   cce_error_handler_t		*: ccsys_error_handler_pipedes_init)(L,&(H->handler),pipefd)


/** --------------------------------------------------------------------
 ** Input/output: creating FIFOs.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mkfifo (cce_destination_t L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_mkfifoat (cce_destination_t L, ccsys_dirfd_t dirfd, const char * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** Input/output: closing file descriptors.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_close (cce_destination_t L, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_filedes_init (cce_destination_t L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_error_handler_filedes_init (cce_destination_t L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((__nonnull__(1,2)));

#define ccsys_handler_filedes_init(L,H,filedes)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_filedes_init, \
	   cce_error_handler_t		*: ccsys_error_handler_filedes_init)(L,&(H->handler),filedes)


/** --------------------------------------------------------------------
 ** Input/output system: reading and writing files.
 ** ----------------------------------------------------------------- */

ccsys_decl size_t ccsys_read (cce_destination_t L, ccsys_fd_t filedes, void * buffer, size_t size)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pread (cce_destination_t L, ccsys_fd_t filedes, void * buffer, size_t size, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_write (cce_destination_t L, ccsys_fd_t filedes, void const *buffer, size_t size)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pwrite (cce_destination_t L, ccsys_fd_t filedes, void const *buffer, size_t size, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

ccsys_decl ccsys_off_t ccsys_lseek (cce_destination_t L, ccsys_fd_t filedes, ccsys_off_t offset, ccsys_whence_t whence)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Input/output: scatter-gather input/output.
 ** ----------------------------------------------------------------- */

ccsys_decl size_t ccsys_readv (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_writev (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count)
  __attribute__((__nonnull__(1,3)));

/* ------------------------------------------------------------------ */

ccsys_decl size_t ccsys_preadv (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pwritev (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count, ccsys_off_t offset)
  __attribute__((__nonnull__(1,3)));

/* ------------------------------------------------------------------ */

ccsys_decl size_t ccsys_preadv2 (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count,
				 ccsys_off_t offset, ccsys_scatter_gather_flags_t flags)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_pwritev2 (cce_destination_t L, ccsys_fd_t filedes, ccsys_iovec_t const * vector, int count,
				  ccsys_off_t offset, ccsys_scatter_gather_flags_t flags)
  __attribute__((__nonnull__(1,3)));

/* ------------------------------------------------------------------ */

#define CCSYS_HAVE_STRUCT_IOVEC_IOV_BASE	@CCSYS_HAVE_STRUCT_IOVEC_IOV_BASE@
#define CCSYS_HAVE_STRUCT_IOVEC_IOV_LEN		@CCSYS_HAVE_STRUCT_IOVEC_IOV_LEN@

/* Accessors for "struct iovec". */
CCSYS_STRUCT_ACCESSORS(iovec_iov_base, ccsys_iovec_t, void *)
CCSYS_STRUCT_ACCESSORS(iovec_iov_len,  ccsys_iovec_t, size_t)


/** --------------------------------------------------------------------
 ** Input/output: duplicating file descriptors.
 ** ----------------------------------------------------------------- */

ccsys_decl ccsys_fd_t ccsys_dup (cce_destination_t L, ccsys_fd_t old)
  __attribute__((__nonnull__(1)));

ccsys_decl ccsys_fd_t ccsys_dup2 (cce_destination_t L, ccsys_fd_t old, ccsys_fd_t new)
  __attribute__((__nonnull__(1)));

ccsys_decl ccsys_fd_t ccsys_dup3 (cce_destination_t L, ccsys_fd_t old, ccsys_fd_t new, ccsys_open_flags_t flags)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Input/output: waiting for input/output.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_select (cce_destination_t L, ccsys_fd_t nfds,
			     ccsys_fd_set_t * read_fds, ccsys_fd_set_t * write_fds, ccsys_fd_set_t * except_fds,
			     ccsys_timeval_t * timeout)
  __attribute__((__nonnull__(1)));

ccsys_decl int ccsys_pselect (cce_destination_t L, ccsys_fd_t nfds,
			      ccsys_fd_set_t * read_fds, ccsys_fd_set_t * write_fds, ccsys_fd_set_t * except_fds,
			      ccsys_timespec_t * timeout, ccsys_sigset_t const * sigmask)
  __attribute__((__nonnull__(1)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_fd_clr   (ccsys_fd_t fd, ccsys_fd_set_t * fds)
  __attribute__((__nonnull__(2)));

ccsys_decl bool ccsys_fd_isset (ccsys_fd_t fd, ccsys_fd_set_t * fds)
  __attribute__((__nonnull__(2)));

ccsys_decl void ccsys_fd_set   (ccsys_fd_t fd, ccsys_fd_set_t * fds)
  __attribute__((__nonnull__(2)));

ccsys_decl void ccsys_fd_zero  (ccsys_fd_set_t * fds)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** Input/output: committing file system caches to disk.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_sync (void);

ccsys_decl void ccsys_syncfs (cce_destination_t L, ccsys_fd_t fd)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_fsync (cce_destination_t L, ccsys_fd_t fd)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_fdatasync (cce_destination_t L, ccsys_fd_t fd)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: working directory.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_getcwd (cce_destination_t L, char * buffer, size_t size)
  __attribute__((__nonnull__(1,2)));

ccsys_decl bool ccsys_custom_getcwd (cce_destination_t L, char * buffer, size_t size)
  __attribute__((__nonnull__(1,2)));

ccsys_decl char * ccsys_get_current_dir_name (cce_destination_t L)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_chdir (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchdir (cce_destination_t L, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: reading directory entries.
 ** ----------------------------------------------------------------- */

#define CCSYS_HAVE_STRUCT_DIRENT_D_NAME		@CCSYS_HAVE_STRUCT_DIRENT_D_NAME@

CCSYS_STRUCT_GETTER(dirent_d_name, ccsys_dirent_t, char const *)

/* ------------------------------------------------------------------ */

ccsys_decl ccsys_dir_t * ccsys_opendir (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_dir_t * ccsys_fdopendir (cce_destination_t L, ccsys_dirfd_t dirfd)
  __attribute__((__nonnull__(1)));

ccsys_decl ccsys_dirent_t * ccsys_readdir (cce_destination_t L, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_closedir (cce_destination_t L, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_dirfd_t ccsys_dirfd (cce_destination_t L, ccsys_dir_t * _dirstream)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_dirstream_init (cce_destination_t L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_dirstream_init (cce_destination_t L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_dirstream_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_dirstream_init, \
	   cce_error_handler_t		*: ccsys_error_handler_dirstream_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: reading attributes.
 ** ----------------------------------------------------------------- */

ccsys_decl bool ccsys_stat (cce_destination_t L, char const * pathname, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl bool ccsys_rawfd_fstat (cce_destination_t L, int fd, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,3)));

__attribute__((__always_inline__,__nonnull__(1,3)))
static inline bool
ccsys_fd_fstat (cce_destination_t L, ccsys_fd_t fd, ccsys_stat_t * buf)
{
  return ccsys_rawfd_fstat(L, fd.data, buf);
}

__attribute__((__always_inline__,__nonnull__(1,3)))
static inline bool
ccsys_dirfd_fstat (cce_destination_t L, ccsys_dirfd_t fd, ccsys_stat_t * buf)
{
  return ccsys_rawfd_fstat(L, fd.data, buf);
}

#define ccsys_fstat(L,fd,buf)					\
  _Generic((fd),						\
	   ccsys_fd_t:		ccsys_fd_fstat,			\
	   ccsys_dirfd_t:	ccsys_dirfd_fstat)(L,fd,buf)

ccsys_decl bool ccsys_fstatat (cce_destination_t L, ccsys_dirfd_t fd, char const * pathname, ccsys_stat_t * buf,
			       ccsys_fstatat_flags_t flags)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl bool ccsys_lstat (cce_destination_t L, char const * pathname, ccsys_stat_t * buf)
  __attribute__((__nonnull__(1,2,3)));

/* ------------------------------------------------------------------ */

#define CCSYS_HAVE_STRUCT_STAT_ST_DEV		@CCSYS_HAVE_STRUCT_STAT_ST_DEV@
#define CCSYS_HAVE_STRUCT_STAT_ST_INO		@CCSYS_HAVE_STRUCT_STAT_ST_INO@
#define CCSYS_HAVE_STRUCT_STAT_ST_MODE		@CCSYS_HAVE_STRUCT_STAT_ST_MODE@
#define CCSYS_HAVE_STRUCT_STAT_ST_NLINK		@CCSYS_HAVE_STRUCT_STAT_ST_NLINK@
#define CCSYS_HAVE_STRUCT_STAT_ST_UID		@CCSYS_HAVE_STRUCT_STAT_ST_UID@
#define CCSYS_HAVE_STRUCT_STAT_ST_GID		@CCSYS_HAVE_STRUCT_STAT_ST_GID@
#define CCSYS_HAVE_STRUCT_STAT_ST_RDEV		@CCSYS_HAVE_STRUCT_STAT_ST_RDEV@
#define CCSYS_HAVE_STRUCT_STAT_ST_SIZE		@CCSYS_HAVE_STRUCT_STAT_ST_SIZE@
#define CCSYS_HAVE_STRUCT_STAT_ST_BLKSIZE	@CCSYS_HAVE_STRUCT_STAT_ST_BLKSIZE@
#define CCSYS_HAVE_STRUCT_STAT_ST_BLOCKS	@CCSYS_HAVE_STRUCT_STAT_ST_BLOCKS@
#define CCSYS_HAVE_STRUCT_STAT_ST_ATIME		@CCSYS_HAVE_STRUCT_STAT_ST_ATIME@
#define CCSYS_HAVE_STRUCT_STAT_ST_MTIME		@CCSYS_HAVE_STRUCT_STAT_ST_MTIME@
#define CCSYS_HAVE_STRUCT_STAT_ST_CTIME		@CCSYS_HAVE_STRUCT_STAT_ST_CTIME@
#define CCSYS_HAVE_STRUCT_STAT_ST_ATIME_USEC	@CCSYS_HAVE_STRUCT_STAT_ST_ATIME_USEC@
#define CCSYS_HAVE_STRUCT_STAT_ST_MTIME_USEC	@CCSYS_HAVE_STRUCT_STAT_ST_MTIME_USEC@
#define CCSYS_HAVE_STRUCT_STAT_ST_CTIME_USEC	@CCSYS_HAVE_STRUCT_STAT_ST_CTIME_USEC@
#define CCSYS_HAVE_STRUCT_STAT_ST_ATIM		@CCSYS_HAVE_STRUCT_STAT_ST_ATIME@
#define CCSYS_HAVE_STRUCT_STAT_ST_MTIM		@CCSYS_HAVE_STRUCT_STAT_ST_MTIME@
#define CCSYS_HAVE_STRUCT_STAT_ST_CTIM		@CCSYS_HAVE_STRUCT_STAT_ST_CTIME@

CCSYS_STRUCT_ACCESSORS(stat_st_dev,	ccsys_stat_t, ccsys_dev_t)
CCSYS_STRUCT_ACCESSORS(stat_st_ino,	ccsys_stat_t, ccsys_ino_t)
CCSYS_STRUCT_ACCESSORS(stat_st_mode,	ccsys_stat_t, ccsys_stat_mode_t)
CCSYS_STRUCT_ACCESSORS(stat_st_nlink,	ccsys_stat_t, ccsys_nlink_t)
CCSYS_STRUCT_ACCESSORS(stat_st_uid,	ccsys_stat_t, ccsys_uid_t)
CCSYS_STRUCT_ACCESSORS(stat_st_gid,	ccsys_stat_t, ccsys_gid_t)
CCSYS_STRUCT_ACCESSORS(stat_st_rdev,	ccsys_stat_t, ccsys_dev_t)
CCSYS_STRUCT_ACCESSORS(stat_st_size,	ccsys_stat_t, ccsys_off_t)
CCSYS_STRUCT_ACCESSORS(stat_st_blksize, ccsys_stat_t, ccsys_blksize_t)
CCSYS_STRUCT_ACCESSORS(stat_st_blocks,	ccsys_stat_t, ccsys_blkcnt_t)
CCSYS_STRUCT_ACCESSORS(stat_st_atime,	ccsys_stat_t, ccsys_timeval_t)
CCSYS_STRUCT_ACCESSORS(stat_st_mtime,	ccsys_stat_t, ccsys_timeval_t)
CCSYS_STRUCT_ACCESSORS(stat_st_ctime,	ccsys_stat_t, ccsys_timeval_t)
CCSYS_STRUCT_ACCESSORS(stat_st_atim,	ccsys_stat_t, ccsys_timespec_t)
CCSYS_STRUCT_ACCESSORS(stat_st_mtim,	ccsys_stat_t, ccsys_timespec_t)
CCSYS_STRUCT_ACCESSORS(stat_st_ctim,	ccsys_stat_t, ccsys_timespec_t)

/* ------------------------------------------------------------------ */

#if (1 == CCSYS_HAVE_STRUCT_STAT_ST_MODE)

ccsys_decl bool ccsys_s_isreg (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_isdir (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_ischr (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_isblk (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_isfifo (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_islnk (ccsys_stat_mode_t F)
  __attribute__((__const__));

ccsys_decl bool ccsys_s_issock (ccsys_stat_mode_t F)
  __attribute__((__const__));

#endif

/* ------------------------------------------------------------------ */

ccsys_decl bool ccsys_pathname_exists (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl bool ccsys_pathname_isreg (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl bool ccsys_pathname_isdir (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** File system: creating files.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_touch (cce_destination_t L, const char *filename, ccsys_open_flags_t flags, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** File system: creating and deleting directories.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_mkdir (cce_destination_t L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_mkdirat (cce_destination_t L, ccsys_dirfd_t fd, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,3)));

ccsys_decl void ccsys_rmdir (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_rmdir_init (cce_destination_t L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_rmdir_init (cce_destination_t L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_rmdir_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_rmdir_init, \
	   cce_error_handler_t		*: ccsys_error_handler_rmdir_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: temporary files and directories.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_mkstemp (cce_destination_t L, char * template)
  __attribute__((__nonnull__(1,2)));

ccsys_decl char * ccsys_mkdtemp (cce_destination_t L, char * template)
  __attribute__((__nonnull__(1,2)));


/** --------------------------------------------------------------------
 ** File system: links.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_link (cce_destination_t L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_linkat (cce_destination_t L,
			      ccsys_dirfd_t oldfd, char const * oldname,
			      ccsys_dirfd_t newfd, char const * newname,
			      ccsys_linkat_flags_t flags)
  __attribute__((__nonnull__(1,3,5)));

ccsys_decl void ccsys_symlink (cce_destination_t L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_symlinkat (cce_destination_t L, char const * oldname, ccsys_dirfd_t newdirfd, char const * newname)
  __attribute__((__nonnull__(1,2,4)));

ccsys_decl size_t ccsys_readlink (cce_destination_t L, char const * filename, char * buffer, size_t size)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl size_t ccsys_readlinkat (cce_destination_t L, ccsys_dirfd_t dirfd, char const * filename, char * buffer, size_t size)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl char * ccsys_realpath (cce_destination_t L, char const * pathname, char * resolved_path)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_unlink (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_unlinkat (cce_destination_t L, ccsys_dirfd_t dirfd, char const * pathname, ccsys_unlinkat_flags_t flags)
  __attribute__((__nonnull__(1,3)));

/* ------------------------------------------------------------------ */

typedef struct ccsys_at_link_t		ccsys_at_link_t;

struct ccsys_at_link_t {
  ccsys_dirfd_t			dirfd;
  char const *			pathname;
  ccsys_unlinkat_flags_t	flags;
};

ccsys_decl void ccsys_cleanup_handler_unlinkat_init (cce_destination_t L, cce_handler_t * H, ccsys_at_link_t * lnk)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_unlinkat_init (cce_destination_t L, cce_handler_t * H, ccsys_at_link_t * lnk)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_unlinkat_init(L,H,LNK)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_unlinkat_init, \
	   cce_error_handler_t		*: ccsys_error_handler_unlinkat_init)(L,&(H->handler),LNK)


/** --------------------------------------------------------------------
 ** File system: removing files.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_remove (cce_destination_t L, char const * pathname)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_remove_init (cce_destination_t L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_error_handler_remove_init (cce_destination_t L, cce_handler_t * H, char const * pathname)
  __attribute__((__nonnull__(1,2,3)));

#define ccsys_handler_remove_init(L,H,R)				\
  _Generic((H),								\
	   cce_cleanup_handler_t	*: ccsys_cleanup_handler_remove_init, \
	   cce_error_handler_t		*: ccsys_error_handler_remove_init)(L,&(H->handler),R)


/** --------------------------------------------------------------------
 ** File system: renaming directory entries.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_rename (cce_destination_t L, char const * oldname, char const * newname)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_renameat (cce_destination_t L,
				ccsys_dirfd_t old_dirfd, char const * oldname,
				ccsys_dirfd_t new_dirfd, char const * newname)
  __attribute__((__nonnull__(1,3,5)));

ccsys_decl void ccsys_renameat2 (cce_destination_t L,
				 ccsys_dirfd_t old_dirfd, char const * oldname,
				 ccsys_dirfd_t new_dirfd, char const * newname,
				 ccsys_renameat2_flags_t flags)
  __attribute__((__nonnull__(1,3,5)));


/** --------------------------------------------------------------------
 ** File system: changing owner.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_chown (cce_destination_t L, char const * pathname, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchown (cce_destination_t L, ccsys_fd_t filedes, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_lchown (cce_destination_t L, char const * pathname, ccsys_uid_t owner, ccsys_gid_t group)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchownat (cce_destination_t L, ccsys_dirfd_t dirfd, char const * pathname,
				ccsys_uid_t owner, ccsys_gid_t group, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: changing access permissions.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_chmod (cce_destination_t L, char const * pathname, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_fchmod (cce_destination_t L, ccsys_fd_t filedes, ccsys_open_mode_t mode)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_fchmodat (cce_destination_t L, ccsys_dirfd_t dirfd, char const * pathname, ccsys_open_mode_t mode, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: testing access permissions.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_access (cce_destination_t L, char const * pathname, int how)
  __attribute__((__nonnull__(1,2)));

ccsys_decl int ccsys_faccessat (cce_destination_t L, ccsys_dirfd_t dirfd, char const * pathname, int how, int flags)
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** File system: truncating files.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_truncate (cce_destination_t L, char const * pathname, ccsys_off_t length)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_ftruncate (cce_destination_t L, ccsys_fd_t filedes, ccsys_off_t length)
  __attribute__((__nonnull__(1)));


/** --------------------------------------------------------------------
 ** File system: file times.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_utime (cce_destination_t L, char const * pathname, ccsys_utimbuf_t const * times)
  __attribute__((__nonnull__(1,2)));

ccsys_decl void ccsys_utimes (cce_destination_t L, char const * pathname, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_lutimes (cce_destination_t L, char const * pathname, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_futimes (cce_destination_t L, ccsys_fd_t filedes, ccsys_timeval_t const TVP[2])
  __attribute__((__nonnull__(1,3)));


/** --------------------------------------------------------------------
 ** Process handling.
 ** ----------------------------------------------------------------- */

ccsys_decl int ccsys_system (cce_destination_t L, char const * command)
  __attribute__((__nonnull__(1,2)));

/* ------------------------------------------------------------------ */

ccsys_decl ccsys_pid_t ccsys_fork (cce_destination_t L)
  __attribute__((__nonnull__(1)));

__attribute__((__always_inline__))
static inline bool
ccsys_in_parent_after_fork (ccsys_pid_t pid)
{
  return (pid.data)? true : false;
}

__attribute__((__always_inline__))
static inline bool
ccsys_in_child_after_fork (ccsys_pid_t pid)
{
  return (pid.data)? false : true;
}

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_exit (ccsys_exit_status_t status)
  __attribute__((__noreturn__));

ccsys_decl void ccsys__exit (ccsys_exit_status_t status)
  __attribute__((__noreturn__));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_execv (cce_destination_t L, char const * filename, char * const argv [])
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl void ccsys_execve (cce_destination_t L, char const * filename, char * const argv [], char * const env [])
  __attribute__((__nonnull__(1,2,3,4)));

ccsys_decl void ccsys_execvp (cce_destination_t L, char const * filename, char * const argv [])
  __attribute__((__nonnull__(1,2,3)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_waitpid (cce_destination_t L, ccsys_pid_t pid, ccsys_waitpid_status_t * wstatus, ccsys_waitpid_options_t options)
  __attribute__((__nonnull__(1,3)));

ccsys_decl bool            ccsys_wifexited	(ccsys_waitpid_status_t  wstatus);
ccsys_decl uint8_t         ccsys_wexitstatus	(ccsys_waitpid_status_t  wstatus);

ccsys_decl bool            ccsys_wifsignaled	(ccsys_waitpid_status_t  wstatus);
ccsys_decl ccsys_signum_t  ccsys_wtermsig	(ccsys_waitpid_status_t  wstatus);

ccsys_decl bool            ccsys_wcoredump	(ccsys_waitpid_status_t  wstatus);

ccsys_decl bool            ccsys_wifstopped	(ccsys_waitpid_status_t  wstatus);
ccsys_decl ccsys_signum_t  ccsys_wstopsig	(ccsys_waitpid_status_t  wstatus);


/** --------------------------------------------------------------------
 ** Networking.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_bind (cce_destination_t L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1,3)));

ccsys_decl void ccsys_getsockname (cce_destination_t L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl void ccsys_inet_aton (cce_destination_t L, char const * name, ccsys_in_addr_t * addr)
  __attribute__((__nonnull__(1,2,3)));

ccsys_decl ccsys_in_addr_t ccsys_inet_network (cce_destination_t L, char const * name)
  __attribute__((__nonnull__(1,2)));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyname (cce_destination_t L, char const * name)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyname2 (cce_destination_t L, char const * name, int af)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl ccsys_hostent_t * ccsys_gethostbyaddr (cce_destination_t L, void const * addr, ccsys_socklen_t length, int format)
  __attribute__((__nonnull__(1,2),__returns_nonnull__));

ccsys_decl int ccsys_socket (cce_destination_t L, ccsys_socket_namespace_t namespace,
			     ccsys_socket_style_t style, ccsys_socket_protocol_t protocol)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_shutdown (cce_destination_t L, ccsys_fd_t socket, int how)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_socketpair (cce_destination_t L, ccsys_socket_namespace_t namespace,
				  ccsys_socket_style_t style, ccsys_socket_protocol_t protocol,
				  ccsys_fd_t filedes[2])
  __attribute__((__nonnull__(1,5)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_connect (cce_destination_t L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1)));

ccsys_decl void ccsys_listen (cce_destination_t L, ccsys_fd_t socket, int N)
  __attribute__((__nonnull__(1)));

ccsys_decl int ccsys_accept (cce_destination_t L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl void ccsys_getpeername (cce_destination_t L, ccsys_fd_t socket, ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,4)));

ccsys_decl size_t ccsys_send (cce_destination_t L, ccsys_fd_t socket, void const * buffer, size_t size, int flags)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_recv (cce_destination_t L, ccsys_fd_t socket, void * buffer, size_t size, int flags)
  __attribute__((__nonnull__(1,3)));

ccsys_decl size_t ccsys_sendto (cce_destination_t L, ccsys_fd_t socket, void const * buffer, size_t size, int flags,
				ccsys_sockaddr_t * addr, ccsys_socklen_t length)
  __attribute__((__nonnull__(1,3,6)));

ccsys_decl size_t ccsys_recvfrom (cce_destination_t L, ccsys_fd_t socket, void * buffer, size_t size, int flags,
				  ccsys_sockaddr_t * addr, ccsys_socklen_t * length_ptr)
  __attribute__((__nonnull__(1,3,6,7)));

ccsys_decl void ccsys_getsockopt (cce_destination_t L, ccsys_fd_t socket, int level, int optname, void * optval, ccsys_socklen_t * optlen_ptr)
  __attribute__((__nonnull__(1,5,6)));

ccsys_decl void ccsys_setsockopt (cce_destination_t L, ccsys_fd_t socket, int level, int optname, void const * optval, ccsys_socklen_t optlen)
  __attribute__((__nonnull__(1,5)));


/** --------------------------------------------------------------------
 ** Done.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* CCSYS_H */

/* end of file */
