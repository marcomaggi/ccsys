/*
  Part of: CCSys
  Contents: public header file
  Date: Sat Dec 17, 2016

  Abstract

	This is the  main header: it must be included  in all the source
	files  using  CCSys.   Notice  that the  code  needs  the  POSIX
	features, so it defines the following symbol:

	   #define _POSIX_C_SOURCE 200809L

  Copyright (C) 2016, 2017 Marco Maggi <marco.maggi-ipsu@poste.it>

  This program is  free software: you can redistribute  it and/or modify
  it  under the  terms  of  the GNU  Lesser  General  Public License  as
  published by  the Free  Software Foundation, either  version 3  of the
  License, or (at your option) any later version.

  This program  is distributed in the  hope that it will  be useful, but
  WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
  MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
  General Public License for more details.

  You  should have  received a  copy of  the GNU  Lesser General  Public
  License     along    with     this    program.      If    not,     see
  <http://www.gnu.org/licenses/>.
*/

#ifndef CCSYS_H
#define CCSYS_H 1


/** --------------------------------------------------------------------
 ** Preliminary definitions.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* The macro  CCSYS_UNUSED indicates that a  function, function argument
   or variable may potentially be unused. Usage examples:

   static int unused_function (char arg) CCSYS_UNUSED;
   int foo (char unused_argument CCSYS_UNUSED);
   int unused_variable CCSYS_UNUSED;
*/
#ifdef __GNUC__
#  define CCSYS_UNUSED		__attribute__((unused))
#else
#  define CCSYS_UNUSED		/* empty */
#endif

#ifndef __GNUC__
#  define __attribute__(...)	/* empty */
#endif

#ifndef __GNUC__
#  define __builtin_expect(...)	/* empty */
#endif

#if defined _WIN32 || defined __CYGWIN__
#  ifdef BUILDING_DLL
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllexport)) extern
#    else
#      define ccsys_decl		__declspec(dllexport) extern
#    endif
#  else
#    ifdef __GNUC__
#      define ccsys_decl		__attribute__((dllimport)) extern
#    else
#      define ccsys_decl		__declspec(dllimport) extern
#    endif
#  endif
#  define ccsys_private_decl	extern
#else
#  if __GNUC__ >= 4
#    define ccsys_decl		__attribute__((visibility ("default"))) extern
#    define ccsys_private_decl	__attribute__((visibility ("hidden")))  extern
#  else
#    define ccsys_decl		extern
#    define ccsys_private_decl	extern
#  endif
#endif


/** --------------------------------------------------------------------
 ** Helper macros.
 ** ----------------------------------------------------------------- */

/* Pointer cast macro helper. */
#define CCSYS_PC(TYPE,X,Y)		TYPE * X = (TYPE *) (Y)

/* CCSYS_STRUCT_ACCESSOR
 *
 * Define  an inline  function as  accessor for  a struct's  field.  For
 * example, to  define the  accessor for the  field "d_name"  of "struct
 * dirent" we do:
 *
 *   CCSYS_STRUCT_ACCESSOR(ccsys_dirent_d_name, ccsys_dirent_t,
 *      const char *, @OFFSETOF_STRUCT_DIRENT_D_NAME@)
 *
 */
#define CCSYS_STRUCT_ACCESSOR(FUNCNAME,STRUCT_TYPE,FIELD_TYPE,FIELD_OFFSET) \
  __attribute__((always_inline,nonnull(1),pure))	\
  static inline FIELD_TYPE FUNCNAME (const STRUCT_TYPE * S) { return (FIELD_TYPE) &(S->data[FIELD_OFFSET]); }


/** --------------------------------------------------------------------
 ** Headers.
 ** ----------------------------------------------------------------- */

#include <ccexceptions.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>


/** --------------------------------------------------------------------
 ** Common type definitions.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_fd_t		ccsys_fd_t;
typedef struct ccsys_off_t		ccsys_off_t;
typedef struct ccsys_mode_t		ccsys_mode_t;
typedef struct ccsys_ino_t		ccsys_ino_t;
typedef struct ccsys_pid_t		ccsys_pid_t;
typedef struct ccsys_gid_t		ccsys_gid_t;

struct ccsys_fd_t	{ int fd; };
struct ccsys_off_t	{ @CCSYS_TYPE_OFF_T@		data; };
struct ccsys_mode_t	{ @CCSYS_TYPE_MODE_T@		data; };
struct ccsys_ino_t	{ @CCSYS_TYPE_INO_T@		data; };

struct ccsys_pid_t	{ @CCSYS_TYPE_PID_T@		data; };
struct ccsys_gid_t	{ @CCSYS_TYPE_GID_T@		data; };


/** --------------------------------------------------------------------
 ** Version functions.
 ** ----------------------------------------------------------------- */

ccsys_decl const char *	ccsys_version_string		(void)
  __attribute__((leaf,pure));
ccsys_decl int		ccsys_version_interface_current	(void)
  __attribute__((leaf,pure));
ccsys_decl int		ccsys_version_interface_revision(void)
  __attribute__((leaf,pure));
ccsys_decl int		ccsys_version_interface_age	(void)
  __attribute__((leaf,pure));


/** --------------------------------------------------------------------
 ** Memory allocation.
 ** ----------------------------------------------------------------- */

ccsys_decl void * ccsys_malloc (cce_location_t * L, size_t size)
  __attribute__((nonnull(1),returns_nonnull));

ccsys_decl void * ccsys_realloc (cce_location_t * L, void * ptr, size_t newsize)
  __attribute__((nonnull(1),returns_nonnull));

ccsys_decl void * ccsys_calloc (cce_location_t * L, size_t count, size_t eltsize)
  __attribute__((nonnull(1),returns_nonnull));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_cleanup_handler_malloc_init (cce_location_t * L, cce_handler_t * H, void * pointer)
  __attribute__((nonnull(1,2,3)));

ccsys_decl void ccsys_error_handler_malloc_init (cce_location_t * L, cce_handler_t * H, void * pointer)
  __attribute__((nonnull(1,2,3)));


/** --------------------------------------------------------------------
 ** Locking memory pages.
 ** ----------------------------------------------------------------- */

cce_decl void ccsys_mlock (cce_location_t * L, const void * addr, size_t len)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_munlock (cce_location_t * L, const void * addr, size_t len)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_mlockall (cce_location_t * L, int flags)
  __attribute__((nonnull(1)));

cce_decl void ccsys_munlockall (cce_location_t * L)
  __attribute__((nonnull(1)));


/** --------------------------------------------------------------------
 ** Memory mapping.
 ** ----------------------------------------------------------------- */

cce_decl void * ccsys_mmap (cce_location_t * L, void * address, size_t length, int protect, int flags, int filedes, off_t offset)
  __attribute__((nonnull(1,2)));

cce_decl int ccsys_munmap (cce_location_t * L, void * address, size_t length)
  __attribute__((nonnull(1,2)));

cce_decl int ccsys_msync (cce_location_t * L, void * address, size_t length, int flags)
  __attribute__((nonnull(1,2)));

cce_decl int ccsys_mprotect (cce_location_t * L, void * address, size_t length, int prot)
  __attribute__((nonnull(1,2)));

/* ------------------------------------------------------------------ */

cce_decl void * ccsys_mremap (cce_location_t * L, void * address, size_t length, size_t new_length, int flag)
  __attribute__((nonnull(1,2),returns_nonnull));

cce_decl void ccsys_madvise (cce_location_t * L, void * address, size_t length, int advice)
  __attribute__((nonnull(1,2)));


/** --------------------------------------------------------------------
 ** File system: reading files.
 ** ----------------------------------------------------------------- */

cce_decl ccsys_fd_t ccsys_open (cce_location_t * L, const char *filename, int flags, ccsys_mode_t mode)
  __attribute__((nonnull(1,2)));

cce_decl ccsys_fd_t ccsys_openat (cce_location_t * L, ccsys_fd_t dirfd, const char *filename, int flags, ccsys_mode_t mode)
  __attribute__((nonnull(1, 3)));

cce_decl void ccsys_close (cce_location_t * L, ccsys_fd_t filedes)
  __attribute__((nonnull(1)));

cce_decl ccsys_off_t ccsys_lseek (cce_location_t * L, ccsys_fd_t filedes, ccsys_off_t offset, int whence)
  __attribute__((nonnull(1)));

/* ------------------------------------------------------------------ */

cce_decl size_t ccsys_read (cce_location_t * L, ccsys_fd_t filedes, void * buffer, size_t size)
  __attribute__((nonnull(1,3)));

cce_decl size_t ccsys_pread (cce_location_t * L, ccsys_fd_t filedes, void * buffer, size_t size, ccsys_off_t offset)
  __attribute__((nonnull(1,3)));

cce_decl size_t ccsys_write (cce_location_t * L, ccsys_fd_t filedes, const void *buffer, size_t size)
  __attribute__((nonnull(1,3)));

cce_decl size_t ccsys_pwrite (cce_location_t * L, ccsys_fd_t filedes, const void *buffer, size_t size, ccsys_off_t offset)
  __attribute__((nonnull(1,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_cleanup_handler_filedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_error_handler_filedes_init (cce_location_t * L, cce_handler_t * H, ccsys_fd_t filedes)
  __attribute__((nonnull(1,2)));


/** --------------------------------------------------------------------
 ** File system: scatter-gather input/output.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_iovec_t	ccsys_iovec_t;

struct ccsys_iovec_t {
  uint8_t	data[@SIZEOF_STRUCT_IOVEC@];
};

cce_decl size_t ccsys_readv (cce_location_t * L, ccsys_fd_t filedes, const ccsys_iovec_t * vector, int count)
  __attribute__((nonnull(1,3)));

cce_decl size_t ccsys_writev (cce_location_t * L, ccsys_fd_t filedes, const ccsys_iovec_t * vector, int count)
  __attribute__((nonnull(1,3)));

/* Struct accessors. */
__attribute__((returns_nonnull))
CCSYS_STRUCT_ACCESSOR(ccsys_iovec_iov_base, ccsys_iovec_t, void *, @OFFSETOF_STRUCT_IOVEC_IOV_BASE@)

CCSYS_STRUCT_ACCESSOR(ccsys_iovec_iov_len,  ccsys_iovec_t, size_t, @OFFSETOF_STRUCT_IOVEC_IOV_LEN@)


/** --------------------------------------------------------------------
 ** File system: reading directory entries.
 ** ----------------------------------------------------------------- */

typedef struct ccsys_dir_t	ccsys_dir_t;
typedef struct ccsys_dirent_t	ccsys_dirent_t;

struct ccsys_dirent_t {
  uint8_t	data[@SIZEOF_STRUCT_DIRENT@];
};

/* Struct accessors. */
__attribute__((returns_nonnull))
CCSYS_STRUCT_ACCESSOR(ccsys_dirent_d_name, ccsys_dirent_t, const char *, @OFFSETOF_STRUCT_DIRENT_D_NAME@)

cce_decl ccsys_dir_t * ccsys_opendir (cce_location_t * L, const char * pathname)
  __attribute__((nonnull(1,2)));

cce_decl ccsys_dir_t * ccsys_fdopendir (cce_location_t * L, ccsys_fd_t dirfd)
  __attribute__((nonnull(1)));

cce_decl ccsys_dirent_t * ccsys_readdir (cce_location_t * L, ccsys_dir_t * dirstream)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_closedir (cce_location_t * L, ccsys_dir_t * dirstream)
  __attribute__((nonnull(1,2)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_cleanup_handler_dirstream_init (cce_location_t * L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_error_handler_dirstream_init (cce_location_t * L, cce_handler_t * H, ccsys_dir_t * dirstream)
  __attribute__((nonnull(1,2,3)));


/** --------------------------------------------------------------------
 ** System call wrappers: input/output and file descriptors.
 ** ----------------------------------------------------------------- */

cce_decl int ccsys_dup (cce_location_t * L, int old)
  __attribute__((nonnull(1)));
cce_decl int ccsys_dup2 (cce_location_t * L, int old, int new)
  __attribute__((nonnull(1)));

cce_decl void ccsys_pipe (cce_location_t * L, int pipefd[2])
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_mkfifo (cce_location_t * L, const char * pathname, mode_t mode)
  __attribute__((nonnull(1,2)));


/** --------------------------------------------------------------------
 ** System call wrappers: file system operations.
 ** ----------------------------------------------------------------- */

cce_decl void ccsys_getcwd (cce_location_t * L, char * buffer, size_t size)
  __attribute__((nonnull(1)));

cce_decl void ccsys_chdir (cce_location_t * L, const char * pathname)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_fchdir (cce_location_t * L, int dirfd)
  __attribute__((nonnull(1)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_stat (cce_location_t * L, const char * pathname, struct stat * buf)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_fstat (cce_location_t * L, int fd, struct stat * buf)
  __attribute__((nonnull(1,3)));

cce_decl void ccsys_lstat (cce_location_t * L, const char * pathname, struct stat * buf)
  __attribute__((nonnull(1,2,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_mkdir (cce_location_t * L, const char * pathname, mode_t mode)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_rmdir (cce_location_t * L, const char * pathname)
  __attribute__((nonnull(1,2)));

/* ------------------------------------------------------------------ */

cce_decl int ccsys_mkstemp (cce_location_t * L, char * template)
  __attribute__((nonnull(1,2)));

cce_decl char * ccsys_mkdtemp (cce_location_t * L, char * template)
  __attribute__((nonnull(1,2)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_link (cce_location_t * L, const char * oldname, const char * newname)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_linkat (cce_location_t * L,
			      int oldfd, const char * oldname,
			      int newfd, const char * newname,
			      int flags)
  __attribute__((nonnull(1,3,5)));

cce_decl void ccsys_symlink (cce_location_t * L, const char * oldname, const char * newname)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_symlinkat (cce_location_t * L, const char * oldname, int newdirfd, const char * newname)
  __attribute__((nonnull(1,2,4)));

cce_decl size_t ccsys_readlink (cce_location_t * L, const char * filename, char * buffer, size_t size)
  __attribute__((nonnull(1,2,3)));

cce_decl size_t ccsys_readlinkat (cce_location_t * L, int dirfd, const char * filename, char * buffer, size_t size)
  __attribute__((nonnull(1,3,4)));

cce_decl char * ccsys_realpath (cce_location_t * L, const char * pathname, char * resolved_path)
  __attribute__((nonnull(1,2),returns_nonnull));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_unlink (cce_location_t * L, const char * pathname)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_unlinkat (cce_location_t * L, int dirfc, const char * pathname, int flags)
  __attribute__((nonnull(1,3)));

cce_decl void ccsys_remove (cce_location_t * L, const char * pathname)
  __attribute__((nonnull(1,2)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_rename (cce_location_t * L, const char * oldname, const char * newname)
  __attribute__((nonnull(1,2,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_chown (cce_location_t * L, const char * pathname, uid_t owner, gid_t group)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_fchown (cce_location_t * L, int filedes, uid_t owner, gid_t group)
  __attribute__((nonnull(1)));

cce_decl void ccsys_lchown (cce_location_t * L, const char * pathname, uid_t owner, gid_t group)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_fchownat (cce_location_t * L, int dirfd, const char * pathname, uid_t owner, gid_t group, int flags)
  __attribute__((nonnull(1,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_chmod (cce_location_t * L, const char * pathname, mode_t mode)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_fchmod (cce_location_t * L, int filedes, mode_t mode)
  __attribute__((nonnull(1)));

cce_decl void ccsys_fchmodat (cce_location_t * L, int dirfd, const char * pathname, mode_t mode, int flags)
  __attribute__((nonnull(1,3)));

/* ------------------------------------------------------------------ */

cce_decl int ccsys_access (cce_location_t * L, const char * pathname, int how)
  __attribute__((nonnull(1,2)));

cce_decl int ccsys_faccessat (cce_location_t * L, int dirfd, const char * pathname, int how, int flags)
  __attribute__((nonnull(1,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_utime (cce_location_t * L, const char * pathname, const struct utimbuf * times)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_utimes (cce_location_t * L, const char * pathname, const struct timeval TVP[2])
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_lutimes (cce_location_t * L, const char * pathname, const struct timeval TVP[2])
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_futimes (cce_location_t * L, int filedes, const struct timeval TVP[2])
  __attribute__((nonnull(1,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_truncate (cce_location_t * L, const char * pathname, off_t length)
  __attribute__((nonnull(1,2)));

cce_decl void ccsys_ftruncate (cce_location_t * L, int filedes, off_t length)
  __attribute__((nonnull(1)));


/** --------------------------------------------------------------------
 ** Waiting for input/output.
 ** ----------------------------------------------------------------- */

cce_decl int ccsys_select (cce_location_t * L, int nfds, fd_set * read_fds, fd_set * write_fds, fd_set * except_fds,
			     struct timeval * timeout)
  __attribute__((nonnull(1)));


/** --------------------------------------------------------------------
 ** System call wrappers: process handling.
 ** ----------------------------------------------------------------- */

cce_decl int ccsys_system (cce_location_t * L, const char * command)
  __attribute__((nonnull(1,2)));

cce_decl pid_t ccsys_fork (cce_location_t * L)
  __attribute__((nonnull(1)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_execv (cce_location_t * L, const char * filename, char * const argv [])
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_execve (cce_location_t * L, const char * filename, char * const argv [], char * const env [])
  __attribute__((nonnull(1,2,3,4)));

cce_decl void ccsys_execvp (cce_location_t * L, const char * filename, char * const argv [])
  __attribute__((nonnull(1,2,3)));

/* ------------------------------------------------------------------ */

cce_decl void ccsys_waitpid (cce_location_t * L, pid_t pid, int * wstatus, int options)
  __attribute__((nonnull(1,3)));


/** --------------------------------------------------------------------
 ** Networking.
 ** ----------------------------------------------------------------- */

ccsys_decl void ccsys_bind (cce_location_t * L, int socket, struct sockaddr * addr, socklen_t length)
  __attribute__((nonnull(1,3)));

ccsys_decl void ccsys_getsockname (cce_location_t * L, int socket, struct sockaddr * addr, socklen_t * length_ptr)
  __attribute__((nonnull(1,3,4)));

ccsys_decl void ccsys_inet_aton (cce_location_t * L, const char * name, struct in_addr * addr)
  __attribute__((nonnull(1,2,3)));

ccsys_decl in_addr_t ccsys_inet_network (cce_location_t * L, const char * name)
  __attribute__((nonnull(1,2)));

ccsys_decl struct hostent * ccsys_gethostbyname (cce_location_t * L, const char * name)
  __attribute__((nonnull(1,2),returns_nonnull));

ccsys_decl struct hostent * ccsys_gethostbyname2 (cce_location_t * L, const char * name, int af)
  __attribute__((nonnull(1,2),returns_nonnull));

ccsys_decl struct hostent * ccsys_gethostbyaddr (cce_location_t * L, const void * addr, socklen_t length, int format)
  __attribute__((nonnull(1,2),returns_nonnull));

ccsys_decl int ccsys_socket (cce_location_t * L, int namespace, int style, int protocol)
  __attribute__((nonnull(1)));

ccsys_decl void ccsys_shutdown (cce_location_t * L, int socket, int how)
  __attribute__((nonnull(1)));

ccsys_decl void ccsys_socketpair (cce_location_t * L, int namespace, int style, int protocol, int filedes[2])
  __attribute__((nonnull(1,5)));

/* ------------------------------------------------------------------ */

ccsys_decl void ccsys_connect (cce_location_t * L, int socket, struct sockaddr * addr, socklen_t length)
  __attribute__((nonnull(1)));

ccsys_decl void ccsys_listen (cce_location_t * L, int socket, int N)
  __attribute__((nonnull(1)));

ccsys_decl int ccsys_accept (cce_location_t * L, int socket, struct sockaddr * addr, socklen_t * length_ptr)
  __attribute__((nonnull(1,3,4)));

ccsys_decl void ccsys_getpeername (cce_location_t * L, int socket, struct sockaddr * addr, socklen_t * length_ptr)
  __attribute__((nonnull(1,3,4)));

ccsys_decl size_t ccsys_send (cce_location_t * L, int socket, const void * buffer, size_t size, int flags)
  __attribute__((nonnull(1,3)));

ccsys_decl size_t ccsys_recv (cce_location_t * L, int socket, void * buffer, size_t size, int flags)
  __attribute__((nonnull(1,3)));

ccsys_decl size_t ccsys_sendto (cce_location_t * L, int socket, const void * buffer, size_t size, int flags,
				struct sockaddr * addr, socklen_t length)
  __attribute__((nonnull(1,3,6)));

ccsys_decl size_t ccsys_recvfrom (cce_location_t * L, int socket, void * buffer, size_t size, int flags,
				  struct sockaddr * addr, socklen_t * length_ptr)
  __attribute__((nonnull(1,3,6,7)));

ccsys_decl void ccsys_getsockopt (cce_location_t * L, int socket, int level, int optname, void * optval, socklen_t * optlen_ptr)
  __attribute__((nonnull(1,5,6)));

ccsys_decl void ccsys_setsockopt (cce_location_t * L, int socket, int level, int optname, const void * optval, socklen_t optlen)
  __attribute__((nonnull(1,5)));


/** --------------------------------------------------------------------
 ** Predefined POSIX exception handler: pipe descriptors.
 ** ----------------------------------------------------------------- */

cce_decl void ccsys_cleanup_handler_pipedes_init (cce_location_t * L, cce_handler_t * H, int pipedes[2])
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_error_handler_pipedes_init (cce_location_t * L, cce_handler_t * H, int pipedes[2])
  __attribute__((nonnull(1,2,3)));


/** --------------------------------------------------------------------
 ** Predefined POSIX exception handler: removal of temporary file.
 ** ----------------------------------------------------------------- */

cce_decl void ccsys_cleanup_handler_tmpfile_init (cce_location_t * L, cce_handler_t * H, const char * pathname)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_error_handler_tmpfile_init (cce_location_t * L, cce_handler_t * H, const char * pathname)
  __attribute__((nonnull(1,2,3)));


/** --------------------------------------------------------------------
 ** Predefined POSIX exception handler: removal of temporary directory.
 ** ----------------------------------------------------------------- */

cce_decl void ccsys_cleanup_handler_tmpdir_init (cce_location_t * L, cce_handler_t * H, const char * pathname)
  __attribute__((nonnull(1,2,3)));

cce_decl void ccsys_error_handler_tmpdir_init (cce_location_t * L, cce_handler_t * H, const char * pathname)
  __attribute__((nonnull(1,2,3)));


/** --------------------------------------------------------------------
 ** Done.
 ** ----------------------------------------------------------------- */

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* CCSYS_H */

/* end of file */
